{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# **DL Assignment 2 - Video Classification**\n",
        "\n",
        "### **Facial Expression Recognition with CK+ dataset**"
      ],
      "metadata": {
        "id": "VyZzXozMY8XF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Group Member Names:\n",
        "1. Anwar Babu\n",
        "2. Mehak\n",
        "3. Rohit Bharadwraj\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "0u4Xr2Lu5kbQ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Overview**\n",
        "\n",
        "The problem statement is the facial expression recognition based on the sequence of images.\n",
        "The data is stored in the google drive for the easy access. As the video dataset was unavailable, we have used the public dataset from the kaggle. This dataset contains the image frames from the video for different facial expressions. So here we have 3 image frames extracted from video for each expression. BAsed on which we build cnn model plus lstm model to predict the facial expression.\n",
        "\n",
        "Dataset used : CK+48 dataset"
      ],
      "metadata": {
        "id": "2RWVzU3jZW4t"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **1. Import Libraries and Dataset**"
      ],
      "metadata": {
        "id": "A5Ibe8fFXl8A"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#mouting the drive into this notebook\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "wC-9ejRKMrW-",
        "outputId": "e140cd07-d9ca-4ecf-90d8-506da23922ff"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#important libraris to be imported for this use case\n",
        "\n",
        "# import the modules\n",
        "import os\n",
        "from os import listdir\n",
        "import pandas as pd\n",
        "from PIL import Image\n",
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "import cv2\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from tensorflow import keras"
      ],
      "metadata": {
        "id": "fwRgl0rfMtDc"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **2. Data Processing**"
      ],
      "metadata": {
        "id": "AqwHY9VcWOs5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### **Image Preprocessing**\n",
        "\n",
        "Image datasets are stored in the google drive which we extract using the api and image preprocessing is done to store it in a dataframe which then could be sued for training the model."
      ],
      "metadata": {
        "id": "t8k2UqgtaBRR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Image pre processing\n",
        "\n",
        "image_dataframe=pd.DataFrame()\n",
        "# get the path/directory\n",
        "folder_dir = r'/content/drive/MyDrive/CK+48'\n",
        "count=0\n",
        "img_list=[]\n",
        "for folder in os.listdir(folder_dir):\n",
        "  path=folder_dir+'/'+str(folder)\n",
        "  #print(path)\n",
        "  for image in os.listdir(path):\n",
        "    image_dataframe.loc[count,'name']= str(image[-7:-4]) \n",
        "    image_dataframe.loc[count,'result']= str(folder) \n",
        "    image_dataframe.loc[count,'ID']= image[:4]\n",
        "    #print(image)\n",
        "    img_path=path+'/'+image\n",
        "    # creating a object\n",
        "    im = Image.open(img_path)\n",
        "    new_image = im.resize((224, 224))\n",
        "    image_array=np.zeros((224, 224))\n",
        "    image_array=np.asarray(new_image)\n",
        "    img_list.append(image_array)\n",
        "    #image_dataframe.loc[count,'Image']= image_array\n",
        "    #im.show()\n",
        "    count=count+1"
      ],
      "metadata": {
        "id": "aW7ED7qZRs9_"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Image converted to array form\n",
        "img_list[0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "hiJFaL-u-Ou7",
        "outputId": "4da92f29-7872-4093-a86d-e43928876897"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 59,  58,  57, ..., 255, 255, 255],\n",
              "       [ 59,  58,  57, ..., 255, 255, 255],\n",
              "       [ 58,  57,  56, ..., 255, 255, 255],\n",
              "       ...,\n",
              "       [224, 219, 210, ..., 148, 148, 148],\n",
              "       [225, 219, 210, ..., 148, 148, 148],\n",
              "       [225, 220, 210, ..., 148, 148, 148]], dtype=uint8)"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Storing the image converted to array into a dataframe\n",
        "image_dataframe['image']=img_list"
      ],
      "metadata": {
        "id": "8R69KeW1R-Z4"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Visualizing the Image**\n"
      ],
      "metadata": {
        "id": "uXanXSnL9rPz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from matplotlib.projections.polar import PolarTransform\n",
        "#Displaying the image\n",
        "print('Emotion:',image_dataframe.loc[0:3,'result'])\n",
        "f, axarr = plt.subplots(1,3)\n",
        "axarr[0].imshow(image_dataframe.loc[0,'image'])\n",
        "axarr[1].imshow(image_dataframe.loc[1,'image'])\n",
        "axarr[2].imshow(image_dataframe.loc[2,'image'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 254
        },
        "id": "Px_qdJYY8wBN",
        "outputId": "5ae04fd8-6a12-49c8-aa37-895874e1fe9b"
      },
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Emotion: 0    anger\n",
            "1    anger\n",
            "2    anger\n",
            "3    anger\n",
            "Name: result, dtype: object\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f589553ebe0>"
            ]
          },
          "metadata": {},
          "execution_count": 84
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Displaying the image\n",
        "print('Emotion:\\n',image_dataframe.loc[597:599,'result'])\n",
        "f, axarr = plt.subplots(1,3)\n",
        "axarr[0].imshow(image_dataframe.loc[597,'image'])\n",
        "axarr[1].imshow(image_dataframe.loc[598,'image'])\n",
        "axarr[2].imshow(image_dataframe.loc[599,'image'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 254
        },
        "id": "91Je5fBA9Xsl",
        "outputId": "fe358ecc-7414-46c9-dd90-16f9d27b4b6d"
      },
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Emotion:\n",
            " 597    surprise\n",
            "598    surprise\n",
            "599    surprise\n",
            "Name: result, dtype: object\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7f58a05c1310>"
            ]
          },
          "metadata": {},
          "execution_count": 90
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### **Data Normalization**"
      ],
      "metadata": {
        "id": "8ibXeFTWWu_O"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Data Normalization\n",
        "image_dataframe['image']=image_dataframe['image']/255.0"
      ],
      "metadata": {
        "id": "j4uE72efinmN"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#The number of images available for each facial expression\n",
        "image_dataframe['result'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "0FRdCQNLSsvc",
        "outputId": "5a893d95-eea4-41fd-84bc-e1a9549ba772"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "surprise    249\n",
              "happy       207\n",
              "anger       135\n",
              "sadness      84\n",
              "fear         75\n",
              "Name: result, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Setting up the dataframe to store image and its corresponding expression and ID\n",
        "image_dataframe=image_dataframe.sort_values(['result','ID','name'],ascending=True).reset_index(drop=True)"
      ],
      "metadata": {
        "id": "47TVtkNkGA46"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### **Data Preparation**"
      ],
      "metadata": {
        "id": "PXgrqjW6W4Zv"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "After the data is preprocessed and normalised, we have to store the data in X and Y format to be used by the model for training and test purpose."
      ],
      "metadata": {
        "id": "3M0UTdflW-BE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Storing image into X and Y format for the model training and validation\n",
        "temp_list=[]\n",
        "X=[]\n",
        "Y=[]\n",
        "for emotion in image_dataframe['result'].unique():\n",
        "  #print(emotion)\n",
        "  temp=image_dataframe[image_dataframe['result']==emotion].reset_index(drop=True)\n",
        "  #print(temp.shape)\n",
        "  for id in temp['ID'].unique():\n",
        "    #print(id)\n",
        "    X.append(temp[temp['ID']==id].sort_values('name')['image'].to_list())\n",
        "    Y.append(emotion)"
      ],
      "metadata": {
        "id": "457dW776GzYM"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **3. Model Building**"
      ],
      "metadata": {
        "id": "raPnMDzzXbiZ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **CNN model for the feature extraction**"
      ],
      "metadata": {
        "id": "WJhgb3FsXP8Y"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "For the extraction of features from the image we have used the Inception model pre trained on Imagenet dataset. We have put the weights= Imagenet as we needed the model to be pretrained on Imagenet dataset.\n",
        "Input shape defines the shape of the image that we input to the cnn model, here we have choses 224*224 with 3 channels."
      ],
      "metadata": {
        "id": "Snd_gZJzYAMy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Building the feature CNN model for the feature extraction\n",
        "def build_feature_extractor():\n",
        "    feature_extractor = keras.applications.InceptionV3(\n",
        "        weights=\"imagenet\",\n",
        "        include_top=False,\n",
        "        pooling=\"avg\",\n",
        "        input_shape=(224, 224, 3),\n",
        "    )\n",
        "    preprocess_input = keras.applications.inception_v3.preprocess_input\n",
        "\n",
        "    inputs = keras.Input((224, 224, 3))\n",
        "    preprocessed = preprocess_input(inputs)\n",
        "\n",
        "    outputs = feature_extractor(preprocessed)\n",
        "    return keras.Model(inputs, outputs, name=\"feature_extractor\")\n",
        "\n",
        "\n",
        "feature_extractor = build_feature_extractor()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "zXlGX3UxY5_G",
        "outputId": "e249a02b-ecf8-487c-a04a-4f406538dd96"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/inception_v3/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5\n",
            "87910968/87910968 [==============================] - 1s 0us/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Summary of the number of parameters\n",
        "feature_extractor.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "s7idB3dxQ_33",
        "outputId": "6a2d1ad0-dbf5-42d8-a176-41bc480c8f91"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"feature_extractor\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " input_2 (InputLayer)        [(None, 224, 224, 3)]     0         \n",
            "                                                                 \n",
            " tf.math.truediv (TFOpLambda  (None, 224, 224, 3)      0         \n",
            " )                                                               \n",
            "                                                                 \n",
            " tf.math.subtract (TFOpLambd  (None, 224, 224, 3)      0         \n",
            " a)                                                              \n",
            "                                                                 \n",
            " inception_v3 (Functional)   (None, 2048)              21802784  \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 21,802,784\n",
            "Trainable params: 21,768,352\n",
            "Non-trainable params: 34,432\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Feature extraction from CNN model**\n",
        "\n",
        "The festure extraction is done based on the model defined in the previous step, then the features are stored in an array in order to use for the LSTM model."
      ],
      "metadata": {
        "id": "JKS40FBMZWKJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Extracting the features from the image using the Inception model pre trained on Imagenet dataset\n",
        "feature_store=[]\n",
        "temp_feature=[]\n",
        "for i in range(len(X)):\n",
        "  #temp_feature=[]\n",
        "  for j in range(0,3):\n",
        "    print(X[i][j].shape)\n",
        "    imgray=X[i][j]\n",
        "    f_image = cv2.merge((imgray,imgray,imgray))\n",
        "    print(f_image.shape)\n",
        "    f_image = f_image.reshape(1,224, 224, 3)\n",
        "    feature=feature_extractor.predict(f_image)\n",
        "    temp_feature.append(feature)\n",
        "  #feature_store.append(temp_feature)\n",
        "\n",
        "temp_feature=np.array(temp_feature)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "rzWEfZlKM6rw",
        "outputId": "31c009c7-a0e4-4fca-d7c1-569b847e5fa7"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 2s 2s/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 177ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 265ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 275ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 264ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 281ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 264ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 300ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 288ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 260ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 273ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 271ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 275ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 148ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 139ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 151ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 146ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 155ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 148ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 146ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 157ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 146ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 143ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 153ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 146ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 155ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 145ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 148ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 146ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 156ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 144ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 157ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 159ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 155ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 178ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 151ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 169ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 181ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 273ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 278ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 268ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 258ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 264ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 262ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 261ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 272ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 257ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 270ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 151ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 141ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 192ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 169ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 154ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 143ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 163ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 156ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 143ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 170ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 146ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 141ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 161ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 150ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 143ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 144ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 155ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 148ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 150ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 148ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 144ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 157ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 154ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 143ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 166ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 153ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 155ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 148ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 151ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 216ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 272ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 259ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 263ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 365ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 339ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 258ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 278ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 272ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 268ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 262ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 150ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 146ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 157ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 150ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 144ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 150ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 154ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 157ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 143ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 139ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 154ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 143ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 159ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 162ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 161ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 139ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 158ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 148ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 171ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 141ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 150ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 139ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 155ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 146ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 144ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 160ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 145ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 155ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 141ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 139ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 150ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 155ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 156ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 153ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 150ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 169ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 143ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 141ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 244ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 273ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 284ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 273ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 274ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 260ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 282ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 265ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 268ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 264ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 270ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 154ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 144ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 148ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 183ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 145ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 157ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 146ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 154ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 146ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 153ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 155ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 139ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 148ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 153ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 139ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 155ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 155ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 139ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 141ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 141ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 145ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 154ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 143ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 144ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 144ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 139ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 141ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 151ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 156ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 265ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 270ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 265ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 267ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 272ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 262ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 267ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 259ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 259ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 275ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 267ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 268ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 153ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 161ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 160ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 156ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 150ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 155ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 145ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 141ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 159ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 153ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 150ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 153ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 151ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 139ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 144ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 154ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 144ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 141ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 153ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 138ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 148ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 143ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 154ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 146ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 139ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 154ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 164ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 148ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 144ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 148ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 156ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 145ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 150ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 203ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 253ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 266ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 273ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 278ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 255ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 267ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 269ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 288ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 268ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 285ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 273ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 159ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 148ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 159ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 150ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 145ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 148ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 143ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 143ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 146ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 143ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 141ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 150ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 141ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 162ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 155ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 156ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 145ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 146ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 153ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 160ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 145ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 461ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 353ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 145ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 163ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 143ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 153ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 163ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 150ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 141ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 154ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 145ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 186ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 245ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 264ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 262ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 261ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 268ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 260ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 262ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 279ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 268ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 271ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 265ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 151ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 169ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 146ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 144ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 169ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 150ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 157ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 150ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 151ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 155ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 155ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 163ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 174ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 153ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 150ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 141ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 150ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 167ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 144ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 151ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 150ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 143ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 150ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 153ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 156ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 148ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 157ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 146ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 156ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 214ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 270ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 291ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 278ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 286ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 268ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 269ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 261ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 261ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 264ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 282ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 268ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 204ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 151ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 148ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 167ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 145ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 154ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 162ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 154ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 144ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 156ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 161ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 144ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 159ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 143ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 160ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 141ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 159ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 164ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 148ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 150ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 153ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 158ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 143ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 162ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 145ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 141ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 141ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 163ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 151ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 161ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 144ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 229ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 279ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 274ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 259ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 258ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 292ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 268ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 267ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 281ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 273ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 265ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 141ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 139ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 145ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 157ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 143ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 143ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 141ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 159ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 148ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 143ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 144ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 154ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 141ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 146ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 155ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 158ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 146ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 162ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 144ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 158ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 150ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 144ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 153ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 170ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 156ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 150ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 139ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 164ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 154ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 269ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 262ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 261ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 281ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 270ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 282ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 273ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 267ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 270ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 266ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 275ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 229ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 154ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 148ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 150ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 157ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 148ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 143ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 150ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 156ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 145ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 153ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 144ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 154ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 154ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 141ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 154ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 165ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 146ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 143ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 157ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 141ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 159ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 150ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 163ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 167ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 145ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 184ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 463ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 151ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 144ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 153ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 145ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 165ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 155ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 168ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 261ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 274ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 281ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 273ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 257ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 292ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 258ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 277ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 283ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 276ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 252ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 170ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 156ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 143ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 159ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 148ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 144ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 141ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 146ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 153ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 156ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 145ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 148ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 153ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 146ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 144ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 143ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 151ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 157ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 160ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 146ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 157ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 146ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 151ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 155ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 141ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 143ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 160ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 150ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 146ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 163ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 145ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 159ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 165ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 241ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 287ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 266ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 274ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 244ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 279ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 266ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 259ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 272ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 282ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 271ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 273ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 228ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 155ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 139ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 165ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 150ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 150ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 154ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 150ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 151ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 160ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 153ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 156ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 148ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 146ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 151ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 158ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 138ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 157ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 168ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 145ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 155ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 158ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 143ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 194ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 145ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 163ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 160ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 144ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 203ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 269ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 259ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 264ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 271ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 271ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 278ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 271ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 262ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 263ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 259ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 262ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 229ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 151ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 146ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 157ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 141ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 139ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 150ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 141ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 145ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 154ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 141ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 158ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 140ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 143ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 157ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 141ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 162ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 139ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 150ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 151ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 157ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 150ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 152ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 146ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 151ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 143ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 155ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 148ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 151ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 139ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 149ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 166ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 143ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 147ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 139ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 222ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 284ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 280ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 273ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 260ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 284ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 258ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 310ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 264ms/step\n",
            "(224, 224)\n",
            "(224, 224, 3)\n",
            "1/1 [==============================] - 0s 288ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Setting up the feature extracted from pretrained model."
      ],
      "metadata": {
        "id": "y_2F_nGcZfxQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#setting the up the data with features extracted for LSTM model\n",
        "X=[]\n",
        "for i in range(0,len(temp_feature),3):\n",
        "  #print(i)\n",
        "  seq_x=temp_feature[i:i+3]\n",
        "  X.append(seq_x)\n",
        "\n",
        "X=np.array(X)"
      ],
      "metadata": {
        "id": "YedGMjPWztnF"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**LSTM Model building and compilation**\n"
      ],
      "metadata": {
        "id": "UOMact96ZmlO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "For **building the LSTM model** for training, we have setup the dataset with features=2048 and time_steps=3.\n",
        "\n",
        "**Relu** has been chosen as the activation layer at the first and intemediate layers.The model trained with ReLU converged quickly and thus takes much less time when compared to models trained on the Sigmoid function. The model performance is significantly better when trained with ReLU due to quick convergence.The ReLU activation function overcomes the vanishing gradient problem, allowing models to learn faster and perform better as well.\n",
        "\n",
        "**Softmax** at the last layer, as it is a multi-classification problem, to calcualte the probability of each classes. It normalizes the output of a network to a probability distribution over predicted output classes.\n",
        "\n",
        "We have chosen 2 layer LSTM model with a dropout layer in between, the reason being we have already extracted the features from the image using pretrained inception model. As our objective is to categorise those features into right expression based on the features, 2 layer LSTM model is built with 64 neurons and 32 neurons on first and second layer repectively, with appropriate activation function."
      ],
      "metadata": {
        "id": "D8jXktr6q113"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Model building with parameters\n",
        "n_features = 2048\n",
        "n_steps=3\n",
        "X = X.reshape((X.shape[0], X.shape[1], n_features))\n",
        "# define model\n",
        "model = keras.models.Sequential()\n",
        "model.add(keras.layers.LSTM(64, activation='relu', input_shape=(n_steps, n_features),return_sequences=True))\n",
        "model.add(keras.layers.Dropout(0.2))\n",
        "model.add(keras.layers.LSTM(32,activation='relu'))\n",
        "model.add(keras.layers.Dense(5,activation='softmax'))"
      ],
      "metadata": {
        "id": "AhYI3MYuMvMX"
      },
      "execution_count": 47,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **4. Model Compilation**"
      ],
      "metadata": {
        "id": "SdHLFRnb16Fw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])"
      ],
      "metadata": {
        "id": "RA2Sdmrv1-Yi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "For the model compilation we have chosen **sparse categorical entropy** for the multi classification problem. we use sparse categorical cross entropy then we provide the ground truth as single integer unit only rather than as an n-dimensional vector. Here the integer represents the class of the data.\n",
        "\n",
        "**Metric** chosen is 'Accuracy' to know the performance of the model on classification.\n",
        "\n",
        "The **optimizer** is Adam because it uses the estimations of the first and second moments of the gradient to adapt the learning rate for each weight of the neural network.\n"
      ],
      "metadata": {
        "id": "MYXEQmRK198r"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "LtrSMVTzgBJY",
        "outputId": "eb7a05a5-caae-413e-a6cd-746374985ade"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_1\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " lstm_2 (LSTM)               (None, 3, 64)             540928    \n",
            "                                                                 \n",
            " dropout (Dropout)           (None, 3, 64)             0         \n",
            "                                                                 \n",
            " lstm_3 (LSTM)               (None, 32)                12416     \n",
            "                                                                 \n",
            " dense_1 (Dense)             (None, 5)                 165       \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 553,509\n",
            "Trainable params: 553,509\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Label Encoding**\n",
        "\n"
      ],
      "metadata": {
        "id": "r8a6TxHSZ94R"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#label encoding on the target variable\n",
        "# Import label encoder\n",
        "from sklearn import preprocessing\n",
        "  \n",
        "# label_encoder object knows how to understand word labels.\n",
        "label_encoder = preprocessing.LabelEncoder()\n",
        "  \n",
        "# Encode labels in column 'species'.\n",
        "Y_trans= label_encoder.fit_transform(Y)"
      ],
      "metadata": {
        "id": "CbdSvM8DxIuh"
      },
      "execution_count": 49,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Y_trans"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "h2OTYhZb-TZP",
        "outputId": "0b550f37-06b6-423b-f516-59e077e41bfc"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
              "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
              "       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
              "       1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
              "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
              "       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n",
              "       2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n",
              "       3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n",
              "       4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n",
              "       4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n",
              "       4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n",
              "       4, 4, 4, 4, 4, 4, 4, 4])"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "{0:\"surprise\", 1:\"happy\", 2:\"anger\", 3:\"sadness\", 4:\"fear\"}"
      ],
      "metadata": {
        "id": "z5DAUzcbc3Z0"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Splitting data into train and test set**\n",
        "\n"
      ],
      "metadata": {
        "id": "J6JW4qv7aB5f"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, Y_trans, test_size=0.20, random_state=40,shuffle=True)"
      ],
      "metadata": {
        "id": "8t8n0t88ALrZ"
      },
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "TKHovfGf4dBV",
        "outputId": "32cef45d-b06f-4816-e5b9-0c666cecd22d"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([4, 4, 0, 3, 0, 2, 3, 3, 3, 2, 4, 4, 2, 2, 2, 3, 2, 3, 3, 0, 3, 2,\n",
              "       2, 2, 2, 4, 4, 3, 4, 1, 0, 4, 2, 0, 4, 4, 4, 2, 4, 0, 1, 4, 2, 0,\n",
              "       2, 3, 3, 2, 1, 4, 4, 0, 0, 1, 1, 2, 4, 3, 0, 2, 0, 1, 0, 0, 4, 2,\n",
              "       2, 0, 0, 4, 3, 2, 3, 2, 1, 4, 0, 2, 0, 0, 1, 3, 4, 4, 2, 1, 4, 2,\n",
              "       2, 3, 2, 4, 2, 1, 2, 4, 1, 2, 4, 2, 1, 4, 2, 2, 4, 0, 4, 1, 0, 4,\n",
              "       4, 2, 0, 4, 0, 2, 2, 4, 4, 2, 2, 4, 4, 0, 4, 2, 3, 0, 2, 1, 2, 0,\n",
              "       2, 4, 1, 4, 2, 4, 3, 2, 2, 2, 4, 0, 2, 4, 2, 2, 2, 0, 3, 4, 2, 4,\n",
              "       0, 1, 0, 4, 4, 4, 4, 3, 3, 4, 4, 4, 2, 2, 0, 4, 4, 2, 2, 0, 4, 3,\n",
              "       4, 0, 4, 4, 1, 4, 2, 2, 4, 4, 1, 2, 3, 0, 2, 2, 0, 4, 1, 4, 3, 0,\n",
              "       4, 2])"
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **5. Model Training**"
      ],
      "metadata": {
        "id": "PqJP1Z1r3Gls"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**LSTM Model Training**\n"
      ],
      "metadata": {
        "id": "8KCH8_B-a0Ui"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "The model is trained for 500 epochs with batch size of 64.\n"
      ],
      "metadata": {
        "id": "p01p0eh64aP4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Training the lstm model on the features extracted from the cnn model\n",
        "history = model.fit(X_train, y_train, epochs=500, verbose=1,batch_size=64, validation_split=0.1)\n",
        "plt.plot(history.history['accuracy'])\n",
        "plt.plot(history.history['val_accuracy'])\n",
        "plt.title('model accuracy')\n",
        "plt.ylabel('accuracy')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'val'], loc='upper left')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17649
        },
        "id": "eZkBiO2ya54w",
        "outputId": "73b315af-6ee3-49ee-8da5-bf81260d5781"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/500\n",
            "3/3 [==============================] - 4s 394ms/step - loss: 1.5840 - accuracy: 0.2722 - val_loss: 1.5707 - val_accuracy: 0.3000\n",
            "Epoch 2/500\n",
            "3/3 [==============================] - 0s 36ms/step - loss: 1.5578 - accuracy: 0.2778 - val_loss: 1.5856 - val_accuracy: 0.3000\n",
            "Epoch 3/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 1.5023 - accuracy: 0.3389 - val_loss: 1.5374 - val_accuracy: 0.3000\n",
            "Epoch 4/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 1.5107 - accuracy: 0.3056 - val_loss: 1.5153 - val_accuracy: 0.3000\n",
            "Epoch 5/500\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 1.4532 - accuracy: 0.3833 - val_loss: 1.5152 - val_accuracy: 0.4000\n",
            "Epoch 6/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 1.4622 - accuracy: 0.4056 - val_loss: 1.5264 - val_accuracy: 0.4500\n",
            "Epoch 7/500\n",
            "3/3 [==============================] - 0s 53ms/step - loss: 1.4504 - accuracy: 0.3667 - val_loss: 1.4865 - val_accuracy: 0.6000\n",
            "Epoch 8/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 1.4182 - accuracy: 0.4778 - val_loss: 1.4710 - val_accuracy: 0.4500\n",
            "Epoch 9/500\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 1.4081 - accuracy: 0.4611 - val_loss: 1.4499 - val_accuracy: 0.6000\n",
            "Epoch 10/500\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 1.3535 - accuracy: 0.4833 - val_loss: 1.4280 - val_accuracy: 0.5500\n",
            "Epoch 11/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 1.3453 - accuracy: 0.4778 - val_loss: 1.3698 - val_accuracy: 0.4000\n",
            "Epoch 12/500\n",
            "3/3 [==============================] - 0s 45ms/step - loss: 1.2609 - accuracy: 0.5444 - val_loss: 1.3226 - val_accuracy: 0.6500\n",
            "Epoch 13/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 1.2422 - accuracy: 0.5611 - val_loss: 1.2961 - val_accuracy: 0.6000\n",
            "Epoch 14/500\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 1.2202 - accuracy: 0.5389 - val_loss: 1.2444 - val_accuracy: 0.6000\n",
            "Epoch 15/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 1.1833 - accuracy: 0.5389 - val_loss: 1.2276 - val_accuracy: 0.5500\n",
            "Epoch 16/500\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 1.1874 - accuracy: 0.5667 - val_loss: 1.2135 - val_accuracy: 0.6000\n",
            "Epoch 17/500\n",
            "3/3 [==============================] - 0s 46ms/step - loss: 1.1798 - accuracy: 0.5667 - val_loss: 1.1969 - val_accuracy: 0.6500\n",
            "Epoch 18/500\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 1.0764 - accuracy: 0.6111 - val_loss: 1.1677 - val_accuracy: 0.5000\n",
            "Epoch 19/500\n",
            "3/3 [==============================] - 0s 36ms/step - loss: 1.0853 - accuracy: 0.5833 - val_loss: 1.1171 - val_accuracy: 0.6000\n",
            "Epoch 20/500\n",
            "3/3 [==============================] - 0s 44ms/step - loss: 1.0035 - accuracy: 0.6444 - val_loss: 1.0882 - val_accuracy: 0.6000\n",
            "Epoch 21/500\n",
            "3/3 [==============================] - 0s 42ms/step - loss: 1.0294 - accuracy: 0.6167 - val_loss: 1.0797 - val_accuracy: 0.6000\n",
            "Epoch 22/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.9430 - accuracy: 0.6556 - val_loss: 1.0658 - val_accuracy: 0.5000\n",
            "Epoch 23/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.9663 - accuracy: 0.6444 - val_loss: 1.0294 - val_accuracy: 0.6000\n",
            "Epoch 24/500\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 0.9323 - accuracy: 0.6444 - val_loss: 1.0054 - val_accuracy: 0.6000\n",
            "Epoch 25/500\n",
            "3/3 [==============================] - 0s 45ms/step - loss: 0.9029 - accuracy: 0.6556 - val_loss: 0.9861 - val_accuracy: 0.5000\n",
            "Epoch 26/500\n",
            "3/3 [==============================] - 0s 47ms/step - loss: 0.9207 - accuracy: 0.6722 - val_loss: 0.9769 - val_accuracy: 0.5500\n",
            "Epoch 27/500\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 0.8846 - accuracy: 0.7056 - val_loss: 0.9567 - val_accuracy: 0.6000\n",
            "Epoch 28/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.8776 - accuracy: 0.6500 - val_loss: 1.0519 - val_accuracy: 0.5500\n",
            "Epoch 29/500\n",
            "3/3 [==============================] - 0s 41ms/step - loss: 0.9082 - accuracy: 0.6667 - val_loss: 1.1814 - val_accuracy: 0.5000\n",
            "Epoch 30/500\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 0.9602 - accuracy: 0.6222 - val_loss: 1.1431 - val_accuracy: 0.4500\n",
            "Epoch 31/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.9154 - accuracy: 0.6444 - val_loss: 1.0877 - val_accuracy: 0.6500\n",
            "Epoch 32/500\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 0.9391 - accuracy: 0.6444 - val_loss: 0.9719 - val_accuracy: 0.5500\n",
            "Epoch 33/500\n",
            "3/3 [==============================] - 0s 45ms/step - loss: 0.8564 - accuracy: 0.6778 - val_loss: 0.9984 - val_accuracy: 0.5000\n",
            "Epoch 34/500\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 0.7975 - accuracy: 0.7000 - val_loss: 0.9586 - val_accuracy: 0.6000\n",
            "Epoch 35/500\n",
            "3/3 [==============================] - 0s 47ms/step - loss: 0.8070 - accuracy: 0.6833 - val_loss: 0.9652 - val_accuracy: 0.6000\n",
            "Epoch 36/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.7881 - accuracy: 0.7167 - val_loss: 0.9032 - val_accuracy: 0.6000\n",
            "Epoch 37/500\n",
            "3/3 [==============================] - 0s 45ms/step - loss: 0.7794 - accuracy: 0.7056 - val_loss: 0.9276 - val_accuracy: 0.6000\n",
            "Epoch 38/500\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 0.7633 - accuracy: 0.7278 - val_loss: 0.8939 - val_accuracy: 0.6500\n",
            "Epoch 39/500\n",
            "3/3 [==============================] - 0s 60ms/step - loss: 0.7146 - accuracy: 0.7389 - val_loss: 0.9141 - val_accuracy: 0.6500\n",
            "Epoch 40/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.7543 - accuracy: 0.7000 - val_loss: 0.9186 - val_accuracy: 0.6500\n",
            "Epoch 41/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.7529 - accuracy: 0.7167 - val_loss: 0.9344 - val_accuracy: 0.5500\n",
            "Epoch 42/500\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 0.6962 - accuracy: 0.7556 - val_loss: 0.8429 - val_accuracy: 0.6500\n",
            "Epoch 43/500\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 0.7306 - accuracy: 0.7111 - val_loss: 0.8707 - val_accuracy: 0.6500\n",
            "Epoch 44/500\n",
            "3/3 [==============================] - 0s 47ms/step - loss: 0.7135 - accuracy: 0.7278 - val_loss: 0.8238 - val_accuracy: 0.6000\n",
            "Epoch 45/500\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 0.6568 - accuracy: 0.7778 - val_loss: 0.8364 - val_accuracy: 0.6000\n",
            "Epoch 46/500\n",
            "3/3 [==============================] - 0s 45ms/step - loss: 0.6417 - accuracy: 0.7278 - val_loss: 0.7970 - val_accuracy: 0.7000\n",
            "Epoch 47/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.6704 - accuracy: 0.7389 - val_loss: 0.7624 - val_accuracy: 0.7000\n",
            "Epoch 48/500\n",
            "3/3 [==============================] - 0s 46ms/step - loss: 0.6561 - accuracy: 0.7500 - val_loss: 0.7312 - val_accuracy: 0.6500\n",
            "Epoch 49/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.6618 - accuracy: 0.7389 - val_loss: 0.7838 - val_accuracy: 0.6000\n",
            "Epoch 50/500\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 0.6861 - accuracy: 0.7556 - val_loss: 0.7946 - val_accuracy: 0.6500\n",
            "Epoch 51/500\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 0.6174 - accuracy: 0.7778 - val_loss: 0.7975 - val_accuracy: 0.7000\n",
            "Epoch 52/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.6094 - accuracy: 0.8111 - val_loss: 0.8029 - val_accuracy: 0.6500\n",
            "Epoch 53/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.6481 - accuracy: 0.7667 - val_loss: 0.7469 - val_accuracy: 0.7500\n",
            "Epoch 54/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.6350 - accuracy: 0.7667 - val_loss: 0.7574 - val_accuracy: 0.6500\n",
            "Epoch 55/500\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 0.5588 - accuracy: 0.7833 - val_loss: 0.6903 - val_accuracy: 0.8000\n",
            "Epoch 56/500\n",
            "3/3 [==============================] - 0s 44ms/step - loss: 0.6146 - accuracy: 0.7889 - val_loss: 0.7220 - val_accuracy: 0.7000\n",
            "Epoch 57/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.6177 - accuracy: 0.7889 - val_loss: 0.6673 - val_accuracy: 0.7500\n",
            "Epoch 58/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.5616 - accuracy: 0.7889 - val_loss: 0.7176 - val_accuracy: 0.7500\n",
            "Epoch 59/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.5583 - accuracy: 0.7944 - val_loss: 0.7326 - val_accuracy: 0.7000\n",
            "Epoch 60/500\n",
            "3/3 [==============================] - 0s 53ms/step - loss: 0.5301 - accuracy: 0.7944 - val_loss: 0.7321 - val_accuracy: 0.6500\n",
            "Epoch 61/500\n",
            "3/3 [==============================] - 0s 64ms/step - loss: 0.6169 - accuracy: 0.7722 - val_loss: 0.7640 - val_accuracy: 0.7500\n",
            "Epoch 62/500\n",
            "3/3 [==============================] - 0s 66ms/step - loss: 0.5692 - accuracy: 0.8056 - val_loss: 0.6507 - val_accuracy: 0.7500\n",
            "Epoch 63/500\n",
            "3/3 [==============================] - 0s 61ms/step - loss: 0.5522 - accuracy: 0.8222 - val_loss: 0.6234 - val_accuracy: 0.7000\n",
            "Epoch 64/500\n",
            "3/3 [==============================] - 0s 66ms/step - loss: 0.4805 - accuracy: 0.8278 - val_loss: 0.6021 - val_accuracy: 0.7500\n",
            "Epoch 65/500\n",
            "3/3 [==============================] - 0s 65ms/step - loss: 0.5096 - accuracy: 0.8278 - val_loss: 0.6558 - val_accuracy: 0.7000\n",
            "Epoch 66/500\n",
            "3/3 [==============================] - 0s 59ms/step - loss: 0.4726 - accuracy: 0.8333 - val_loss: 0.5727 - val_accuracy: 0.7000\n",
            "Epoch 67/500\n",
            "3/3 [==============================] - 0s 64ms/step - loss: 0.5387 - accuracy: 0.8000 - val_loss: 0.5988 - val_accuracy: 0.7500\n",
            "Epoch 68/500\n",
            "3/3 [==============================] - 0s 66ms/step - loss: 0.4794 - accuracy: 0.8333 - val_loss: 0.5704 - val_accuracy: 0.8000\n",
            "Epoch 69/500\n",
            "3/3 [==============================] - 0s 66ms/step - loss: 0.4722 - accuracy: 0.8389 - val_loss: 0.5610 - val_accuracy: 0.7000\n",
            "Epoch 70/500\n",
            "3/3 [==============================] - 0s 64ms/step - loss: 0.4897 - accuracy: 0.8111 - val_loss: 0.5875 - val_accuracy: 0.7500\n",
            "Epoch 71/500\n",
            "3/3 [==============================] - 0s 70ms/step - loss: 0.5364 - accuracy: 0.8056 - val_loss: 0.6767 - val_accuracy: 0.6500\n",
            "Epoch 72/500\n",
            "3/3 [==============================] - 0s 68ms/step - loss: 0.5118 - accuracy: 0.8167 - val_loss: 0.6032 - val_accuracy: 0.7500\n",
            "Epoch 73/500\n",
            "3/3 [==============================] - 0s 63ms/step - loss: 0.4958 - accuracy: 0.7944 - val_loss: 0.6481 - val_accuracy: 0.7500\n",
            "Epoch 74/500\n",
            "3/3 [==============================] - 0s 63ms/step - loss: 0.4702 - accuracy: 0.8278 - val_loss: 0.7654 - val_accuracy: 0.6500\n",
            "Epoch 75/500\n",
            "3/3 [==============================] - 0s 70ms/step - loss: 0.4420 - accuracy: 0.8333 - val_loss: 0.6152 - val_accuracy: 0.7500\n",
            "Epoch 76/500\n",
            "3/3 [==============================] - 0s 66ms/step - loss: 0.5087 - accuracy: 0.7944 - val_loss: 0.5502 - val_accuracy: 0.8500\n",
            "Epoch 77/500\n",
            "3/3 [==============================] - 0s 66ms/step - loss: 0.4690 - accuracy: 0.8611 - val_loss: 0.6148 - val_accuracy: 0.7500\n",
            "Epoch 78/500\n",
            "3/3 [==============================] - 0s 67ms/step - loss: 0.4456 - accuracy: 0.8444 - val_loss: 0.5713 - val_accuracy: 0.7500\n",
            "Epoch 79/500\n",
            "3/3 [==============================] - 0s 63ms/step - loss: 0.4179 - accuracy: 0.8556 - val_loss: 0.6129 - val_accuracy: 0.7500\n",
            "Epoch 80/500\n",
            "3/3 [==============================] - 0s 63ms/step - loss: 0.4173 - accuracy: 0.8444 - val_loss: 0.5468 - val_accuracy: 0.7500\n",
            "Epoch 81/500\n",
            "3/3 [==============================] - 0s 70ms/step - loss: 0.4279 - accuracy: 0.8611 - val_loss: 0.5160 - val_accuracy: 0.7500\n",
            "Epoch 82/500\n",
            "3/3 [==============================] - 0s 61ms/step - loss: 0.4111 - accuracy: 0.8500 - val_loss: 0.4870 - val_accuracy: 0.9000\n",
            "Epoch 83/500\n",
            "3/3 [==============================] - 0s 67ms/step - loss: 0.3992 - accuracy: 0.8778 - val_loss: 0.5238 - val_accuracy: 0.8000\n",
            "Epoch 84/500\n",
            "3/3 [==============================] - 0s 66ms/step - loss: 0.3978 - accuracy: 0.8722 - val_loss: 0.4990 - val_accuracy: 0.8000\n",
            "Epoch 85/500\n",
            "3/3 [==============================] - 0s 65ms/step - loss: 0.3722 - accuracy: 0.8667 - val_loss: 0.4550 - val_accuracy: 0.8000\n",
            "Epoch 86/500\n",
            "3/3 [==============================] - 0s 68ms/step - loss: 0.3780 - accuracy: 0.8722 - val_loss: 0.5673 - val_accuracy: 0.7000\n",
            "Epoch 87/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.3837 - accuracy: 0.8611 - val_loss: 0.4818 - val_accuracy: 0.8000\n",
            "Epoch 88/500\n",
            "3/3 [==============================] - 0s 45ms/step - loss: 0.3349 - accuracy: 0.8778 - val_loss: 0.5975 - val_accuracy: 0.7000\n",
            "Epoch 89/500\n",
            "3/3 [==============================] - 0s 43ms/step - loss: 0.4124 - accuracy: 0.8500 - val_loss: 0.5066 - val_accuracy: 0.8500\n",
            "Epoch 90/500\n",
            "3/3 [==============================] - 0s 47ms/step - loss: 0.3925 - accuracy: 0.8556 - val_loss: 0.5754 - val_accuracy: 0.7500\n",
            "Epoch 91/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.3832 - accuracy: 0.8611 - val_loss: 0.5365 - val_accuracy: 0.7500\n",
            "Epoch 92/500\n",
            "3/3 [==============================] - 0s 51ms/step - loss: 0.4040 - accuracy: 0.8500 - val_loss: 0.5695 - val_accuracy: 0.7500\n",
            "Epoch 93/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.3586 - accuracy: 0.8611 - val_loss: 0.5722 - val_accuracy: 0.7000\n",
            "Epoch 94/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.3782 - accuracy: 0.8778 - val_loss: 0.5793 - val_accuracy: 0.7000\n",
            "Epoch 95/500\n",
            "3/3 [==============================] - 0s 42ms/step - loss: 0.4158 - accuracy: 0.8389 - val_loss: 0.5680 - val_accuracy: 0.8000\n",
            "Epoch 96/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.3680 - accuracy: 0.8833 - val_loss: 0.4957 - val_accuracy: 0.8000\n",
            "Epoch 97/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.3659 - accuracy: 0.8611 - val_loss: 0.6131 - val_accuracy: 0.7500\n",
            "Epoch 98/500\n",
            "3/3 [==============================] - 0s 50ms/step - loss: 0.3659 - accuracy: 0.8389 - val_loss: 0.5698 - val_accuracy: 0.8000\n",
            "Epoch 99/500\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 0.3975 - accuracy: 0.8389 - val_loss: 0.5209 - val_accuracy: 0.8000\n",
            "Epoch 100/500\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 0.3092 - accuracy: 0.8944 - val_loss: 0.6324 - val_accuracy: 0.7500\n",
            "Epoch 101/500\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 0.3380 - accuracy: 0.8722 - val_loss: 0.5140 - val_accuracy: 0.8000\n",
            "Epoch 102/500\n",
            "3/3 [==============================] - 0s 41ms/step - loss: 0.2973 - accuracy: 0.9000 - val_loss: 0.6916 - val_accuracy: 0.7000\n",
            "Epoch 103/500\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 0.3140 - accuracy: 0.8833 - val_loss: 0.4973 - val_accuracy: 0.7500\n",
            "Epoch 104/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.2807 - accuracy: 0.8889 - val_loss: 0.5137 - val_accuracy: 0.7500\n",
            "Epoch 105/500\n",
            "3/3 [==============================] - 0s 41ms/step - loss: 0.2686 - accuracy: 0.8722 - val_loss: 0.4762 - val_accuracy: 0.7500\n",
            "Epoch 106/500\n",
            "3/3 [==============================] - 0s 42ms/step - loss: 0.2981 - accuracy: 0.8889 - val_loss: 0.5930 - val_accuracy: 0.7500\n",
            "Epoch 107/500\n",
            "3/3 [==============================] - 0s 49ms/step - loss: 0.2899 - accuracy: 0.9000 - val_loss: 0.4711 - val_accuracy: 0.8500\n",
            "Epoch 108/500\n",
            "3/3 [==============================] - 0s 41ms/step - loss: 0.2943 - accuracy: 0.8667 - val_loss: 0.5605 - val_accuracy: 0.7500\n",
            "Epoch 109/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.3423 - accuracy: 0.8389 - val_loss: 0.5224 - val_accuracy: 0.7000\n",
            "Epoch 110/500\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 0.3492 - accuracy: 0.8556 - val_loss: 0.5683 - val_accuracy: 0.7000\n",
            "Epoch 111/500\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 0.3912 - accuracy: 0.8444 - val_loss: 0.7178 - val_accuracy: 0.7500\n",
            "Epoch 112/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.3207 - accuracy: 0.8500 - val_loss: 0.6760 - val_accuracy: 0.7000\n",
            "Epoch 113/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.2796 - accuracy: 0.9056 - val_loss: 0.7047 - val_accuracy: 0.7500\n",
            "Epoch 114/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.2962 - accuracy: 0.9056 - val_loss: 0.4634 - val_accuracy: 0.7500\n",
            "Epoch 115/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.2732 - accuracy: 0.9222 - val_loss: 0.8804 - val_accuracy: 0.7000\n",
            "Epoch 116/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.2949 - accuracy: 0.8889 - val_loss: 0.5927 - val_accuracy: 0.7000\n",
            "Epoch 117/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.3336 - accuracy: 0.8667 - val_loss: 0.7526 - val_accuracy: 0.6500\n",
            "Epoch 118/500\n",
            "3/3 [==============================] - 0s 42ms/step - loss: 0.3316 - accuracy: 0.8667 - val_loss: 0.8058 - val_accuracy: 0.6000\n",
            "Epoch 119/500\n",
            "3/3 [==============================] - 0s 36ms/step - loss: 0.2946 - accuracy: 0.8889 - val_loss: 0.7835 - val_accuracy: 0.7000\n",
            "Epoch 120/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.2330 - accuracy: 0.9278 - val_loss: 0.5976 - val_accuracy: 0.7000\n",
            "Epoch 121/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.2190 - accuracy: 0.9333 - val_loss: 0.5212 - val_accuracy: 0.8000\n",
            "Epoch 122/500\n",
            "3/3 [==============================] - 0s 45ms/step - loss: 0.2357 - accuracy: 0.9222 - val_loss: 0.6956 - val_accuracy: 0.7500\n",
            "Epoch 123/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.2160 - accuracy: 0.9167 - val_loss: 0.5259 - val_accuracy: 0.7500\n",
            "Epoch 124/500\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 0.2658 - accuracy: 0.9111 - val_loss: 0.6404 - val_accuracy: 0.8000\n",
            "Epoch 125/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.2654 - accuracy: 0.9000 - val_loss: 0.5884 - val_accuracy: 0.7500\n",
            "Epoch 126/500\n",
            "3/3 [==============================] - 0s 45ms/step - loss: 0.2751 - accuracy: 0.9056 - val_loss: 0.6004 - val_accuracy: 0.7500\n",
            "Epoch 127/500\n",
            "3/3 [==============================] - 0s 45ms/step - loss: 0.2430 - accuracy: 0.9389 - val_loss: 0.4925 - val_accuracy: 0.7500\n",
            "Epoch 128/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.2493 - accuracy: 0.8778 - val_loss: 0.8167 - val_accuracy: 0.7000\n",
            "Epoch 129/500\n",
            "3/3 [==============================] - 0s 43ms/step - loss: 0.2402 - accuracy: 0.9056 - val_loss: 0.7927 - val_accuracy: 0.7500\n",
            "Epoch 130/500\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 0.3217 - accuracy: 0.8889 - val_loss: 0.4916 - val_accuracy: 0.8000\n",
            "Epoch 131/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.3426 - accuracy: 0.8833 - val_loss: 0.6742 - val_accuracy: 0.7500\n",
            "Epoch 132/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.2478 - accuracy: 0.9167 - val_loss: 0.6613 - val_accuracy: 0.7000\n",
            "Epoch 133/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.2836 - accuracy: 0.8889 - val_loss: 0.7422 - val_accuracy: 0.7500\n",
            "Epoch 134/500\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 0.2341 - accuracy: 0.9278 - val_loss: 0.8291 - val_accuracy: 0.7000\n",
            "Epoch 135/500\n",
            "3/3 [==============================] - 0s 45ms/step - loss: 0.2537 - accuracy: 0.8944 - val_loss: 0.6532 - val_accuracy: 0.7500\n",
            "Epoch 136/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.2288 - accuracy: 0.9056 - val_loss: 0.7527 - val_accuracy: 0.7000\n",
            "Epoch 137/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.2405 - accuracy: 0.9056 - val_loss: 0.5389 - val_accuracy: 0.7500\n",
            "Epoch 138/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.1830 - accuracy: 0.9444 - val_loss: 0.6823 - val_accuracy: 0.7000\n",
            "Epoch 139/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.2327 - accuracy: 0.9167 - val_loss: 0.8044 - val_accuracy: 0.7000\n",
            "Epoch 140/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.1796 - accuracy: 0.9222 - val_loss: 0.6299 - val_accuracy: 0.6500\n",
            "Epoch 141/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.1901 - accuracy: 0.9278 - val_loss: 0.5991 - val_accuracy: 0.7500\n",
            "Epoch 142/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.1672 - accuracy: 0.9333 - val_loss: 0.6648 - val_accuracy: 0.7000\n",
            "Epoch 143/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.1676 - accuracy: 0.9389 - val_loss: 0.6746 - val_accuracy: 0.7000\n",
            "Epoch 144/500\n",
            "3/3 [==============================] - 0s 44ms/step - loss: 0.1366 - accuracy: 0.9556 - val_loss: 0.7307 - val_accuracy: 0.7500\n",
            "Epoch 145/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.1587 - accuracy: 0.9500 - val_loss: 0.6155 - val_accuracy: 0.7000\n",
            "Epoch 146/500\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 0.1787 - accuracy: 0.9222 - val_loss: 0.7003 - val_accuracy: 0.7500\n",
            "Epoch 147/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.1610 - accuracy: 0.9389 - val_loss: 0.4768 - val_accuracy: 0.8000\n",
            "Epoch 148/500\n",
            "3/3 [==============================] - 0s 42ms/step - loss: 0.1943 - accuracy: 0.9167 - val_loss: 0.7353 - val_accuracy: 0.7500\n",
            "Epoch 149/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.2159 - accuracy: 0.9000 - val_loss: 0.4834 - val_accuracy: 0.7500\n",
            "Epoch 150/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.1595 - accuracy: 0.9444 - val_loss: 0.9253 - val_accuracy: 0.7500\n",
            "Epoch 151/500\n",
            "3/3 [==============================] - 0s 46ms/step - loss: 0.2040 - accuracy: 0.9222 - val_loss: 0.6734 - val_accuracy: 0.7500\n",
            "Epoch 152/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.2090 - accuracy: 0.9167 - val_loss: 0.5881 - val_accuracy: 0.7000\n",
            "Epoch 153/500\n",
            "3/3 [==============================] - 0s 43ms/step - loss: 0.1262 - accuracy: 0.9778 - val_loss: 0.8885 - val_accuracy: 0.7000\n",
            "Epoch 154/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.1587 - accuracy: 0.9389 - val_loss: 0.7094 - val_accuracy: 0.7000\n",
            "Epoch 155/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.1864 - accuracy: 0.9389 - val_loss: 0.5273 - val_accuracy: 0.7500\n",
            "Epoch 156/500\n",
            "3/3 [==============================] - 0s 42ms/step - loss: 0.1520 - accuracy: 0.9444 - val_loss: 0.7435 - val_accuracy: 0.7500\n",
            "Epoch 157/500\n",
            "3/3 [==============================] - 0s 46ms/step - loss: 0.1851 - accuracy: 0.9333 - val_loss: 0.6495 - val_accuracy: 0.8500\n",
            "Epoch 158/500\n",
            "3/3 [==============================] - 0s 46ms/step - loss: 0.2026 - accuracy: 0.9278 - val_loss: 0.8305 - val_accuracy: 0.7500\n",
            "Epoch 159/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.2156 - accuracy: 0.9389 - val_loss: 0.5134 - val_accuracy: 0.7500\n",
            "Epoch 160/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.1551 - accuracy: 0.9444 - val_loss: 0.8270 - val_accuracy: 0.7500\n",
            "Epoch 161/500\n",
            "3/3 [==============================] - 0s 44ms/step - loss: 0.1664 - accuracy: 0.9389 - val_loss: 0.7074 - val_accuracy: 0.7500\n",
            "Epoch 162/500\n",
            "3/3 [==============================] - 0s 46ms/step - loss: 0.1209 - accuracy: 0.9667 - val_loss: 0.5107 - val_accuracy: 0.7500\n",
            "Epoch 163/500\n",
            "3/3 [==============================] - 0s 46ms/step - loss: 0.1278 - accuracy: 0.9556 - val_loss: 0.6525 - val_accuracy: 0.7500\n",
            "Epoch 164/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.1196 - accuracy: 0.9722 - val_loss: 0.6971 - val_accuracy: 0.7000\n",
            "Epoch 165/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.1001 - accuracy: 0.9667 - val_loss: 0.7088 - val_accuracy: 0.7500\n",
            "Epoch 166/500\n",
            "3/3 [==============================] - 0s 45ms/step - loss: 0.1365 - accuracy: 0.9444 - val_loss: 0.9768 - val_accuracy: 0.7500\n",
            "Epoch 167/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.1128 - accuracy: 0.9722 - val_loss: 0.5442 - val_accuracy: 0.7500\n",
            "Epoch 168/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.1547 - accuracy: 0.9389 - val_loss: 0.9588 - val_accuracy: 0.7500\n",
            "Epoch 169/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.1171 - accuracy: 0.9667 - val_loss: 0.6629 - val_accuracy: 0.7000\n",
            "Epoch 170/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.0947 - accuracy: 0.9611 - val_loss: 0.8713 - val_accuracy: 0.6500\n",
            "Epoch 171/500\n",
            "3/3 [==============================] - 0s 49ms/step - loss: 0.1318 - accuracy: 0.9444 - val_loss: 1.0358 - val_accuracy: 0.7500\n",
            "Epoch 172/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.1900 - accuracy: 0.9167 - val_loss: 0.5195 - val_accuracy: 0.7500\n",
            "Epoch 173/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.1345 - accuracy: 0.9556 - val_loss: 1.1424 - val_accuracy: 0.6500\n",
            "Epoch 174/500\n",
            "3/3 [==============================] - 0s 43ms/step - loss: 0.1314 - accuracy: 0.9500 - val_loss: 1.0897 - val_accuracy: 0.6000\n",
            "Epoch 175/500\n",
            "3/3 [==============================] - 0s 69ms/step - loss: 0.1426 - accuracy: 0.9556 - val_loss: 0.6823 - val_accuracy: 0.7000\n",
            "Epoch 176/500\n",
            "3/3 [==============================] - 0s 67ms/step - loss: 0.0998 - accuracy: 0.9667 - val_loss: 0.8200 - val_accuracy: 0.7500\n",
            "Epoch 177/500\n",
            "3/3 [==============================] - 0s 59ms/step - loss: 0.0786 - accuracy: 0.9722 - val_loss: 0.9735 - val_accuracy: 0.7500\n",
            "Epoch 178/500\n",
            "3/3 [==============================] - 0s 66ms/step - loss: 0.0792 - accuracy: 0.9778 - val_loss: 0.6454 - val_accuracy: 0.7500\n",
            "Epoch 179/500\n",
            "3/3 [==============================] - 0s 55ms/step - loss: 0.0875 - accuracy: 0.9722 - val_loss: 1.0235 - val_accuracy: 0.7000\n",
            "Epoch 180/500\n",
            "3/3 [==============================] - 0s 65ms/step - loss: 0.0947 - accuracy: 0.9556 - val_loss: 0.8483 - val_accuracy: 0.7000\n",
            "Epoch 181/500\n",
            "3/3 [==============================] - 0s 67ms/step - loss: 0.0741 - accuracy: 0.9833 - val_loss: 1.0057 - val_accuracy: 0.7000\n",
            "Epoch 182/500\n",
            "3/3 [==============================] - 0s 64ms/step - loss: 0.0693 - accuracy: 0.9889 - val_loss: 0.9217 - val_accuracy: 0.7000\n",
            "Epoch 183/500\n",
            "3/3 [==============================] - 0s 67ms/step - loss: 0.0666 - accuracy: 0.9667 - val_loss: 0.7745 - val_accuracy: 0.7000\n",
            "Epoch 184/500\n",
            "3/3 [==============================] - 0s 65ms/step - loss: 0.0881 - accuracy: 0.9667 - val_loss: 1.2925 - val_accuracy: 0.7500\n",
            "Epoch 185/500\n",
            "3/3 [==============================] - 0s 66ms/step - loss: 0.1233 - accuracy: 0.9556 - val_loss: 0.6422 - val_accuracy: 0.7500\n",
            "Epoch 186/500\n",
            "3/3 [==============================] - 0s 65ms/step - loss: 0.1307 - accuracy: 0.9444 - val_loss: 1.7321 - val_accuracy: 0.7500\n",
            "Epoch 187/500\n",
            "3/3 [==============================] - 0s 69ms/step - loss: 0.1464 - accuracy: 0.9278 - val_loss: 0.7387 - val_accuracy: 0.7000\n",
            "Epoch 188/500\n",
            "3/3 [==============================] - 0s 69ms/step - loss: 0.1720 - accuracy: 0.9333 - val_loss: 2.2628 - val_accuracy: 0.6000\n",
            "Epoch 189/500\n",
            "3/3 [==============================] - 0s 67ms/step - loss: 0.2902 - accuracy: 0.9000 - val_loss: 0.9687 - val_accuracy: 0.6500\n",
            "Epoch 190/500\n",
            "3/3 [==============================] - 0s 71ms/step - loss: 0.2755 - accuracy: 0.8944 - val_loss: 0.9401 - val_accuracy: 0.7500\n",
            "Epoch 191/500\n",
            "3/3 [==============================] - 0s 61ms/step - loss: 0.1621 - accuracy: 0.9278 - val_loss: 1.4102 - val_accuracy: 0.7500\n",
            "Epoch 192/500\n",
            "3/3 [==============================] - 0s 72ms/step - loss: 0.1589 - accuracy: 0.9556 - val_loss: 0.6036 - val_accuracy: 0.8000\n",
            "Epoch 193/500\n",
            "3/3 [==============================] - 0s 58ms/step - loss: 0.1516 - accuracy: 0.9389 - val_loss: 0.8878 - val_accuracy: 0.7500\n",
            "Epoch 194/500\n",
            "3/3 [==============================] - 0s 64ms/step - loss: 0.1418 - accuracy: 0.9611 - val_loss: 0.9424 - val_accuracy: 0.7500\n",
            "Epoch 195/500\n",
            "3/3 [==============================] - 0s 64ms/step - loss: 0.1362 - accuracy: 0.9500 - val_loss: 0.8709 - val_accuracy: 0.7500\n",
            "Epoch 196/500\n",
            "3/3 [==============================] - 0s 67ms/step - loss: 0.0989 - accuracy: 0.9778 - val_loss: 0.8252 - val_accuracy: 0.7000\n",
            "Epoch 197/500\n",
            "3/3 [==============================] - 0s 60ms/step - loss: 0.0716 - accuracy: 0.9833 - val_loss: 0.9010 - val_accuracy: 0.7000\n",
            "Epoch 198/500\n",
            "3/3 [==============================] - 0s 64ms/step - loss: 0.1115 - accuracy: 0.9556 - val_loss: 1.1153 - val_accuracy: 0.7000\n",
            "Epoch 199/500\n",
            "3/3 [==============================] - 0s 64ms/step - loss: 0.1115 - accuracy: 0.9667 - val_loss: 1.1164 - val_accuracy: 0.7500\n",
            "Epoch 200/500\n",
            "3/3 [==============================] - 0s 64ms/step - loss: 0.1041 - accuracy: 0.9667 - val_loss: 0.9215 - val_accuracy: 0.6500\n",
            "Epoch 201/500\n",
            "3/3 [==============================] - 0s 66ms/step - loss: 0.0922 - accuracy: 0.9667 - val_loss: 1.4273 - val_accuracy: 0.7500\n",
            "Epoch 202/500\n",
            "3/3 [==============================] - 0s 59ms/step - loss: 0.1404 - accuracy: 0.9389 - val_loss: 0.6724 - val_accuracy: 0.8000\n",
            "Epoch 203/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.0779 - accuracy: 0.9833 - val_loss: 1.0996 - val_accuracy: 0.7500\n",
            "Epoch 204/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0928 - accuracy: 0.9722 - val_loss: 0.8402 - val_accuracy: 0.7500\n",
            "Epoch 205/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0623 - accuracy: 0.9944 - val_loss: 0.9625 - val_accuracy: 0.7500\n",
            "Epoch 206/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0725 - accuracy: 0.9722 - val_loss: 0.9525 - val_accuracy: 0.7500\n",
            "Epoch 207/500\n",
            "3/3 [==============================] - 0s 46ms/step - loss: 0.0713 - accuracy: 0.9667 - val_loss: 0.8720 - val_accuracy: 0.8000\n",
            "Epoch 208/500\n",
            "3/3 [==============================] - 0s 43ms/step - loss: 0.0765 - accuracy: 0.9778 - val_loss: 1.1639 - val_accuracy: 0.7500\n",
            "Epoch 209/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0765 - accuracy: 0.9611 - val_loss: 0.6495 - val_accuracy: 0.7500\n",
            "Epoch 210/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.0868 - accuracy: 0.9667 - val_loss: 0.8636 - val_accuracy: 0.7000\n",
            "Epoch 211/500\n",
            "3/3 [==============================] - 0s 63ms/step - loss: 0.0521 - accuracy: 0.9944 - val_loss: 1.0279 - val_accuracy: 0.7500\n",
            "Epoch 212/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.0527 - accuracy: 0.9833 - val_loss: 1.0982 - val_accuracy: 0.7500\n",
            "Epoch 213/500\n",
            "3/3 [==============================] - 0s 42ms/step - loss: 0.0722 - accuracy: 0.9833 - val_loss: 0.9043 - val_accuracy: 0.7000\n",
            "Epoch 214/500\n",
            "3/3 [==============================] - 0s 41ms/step - loss: 0.0786 - accuracy: 0.9722 - val_loss: 0.9363 - val_accuracy: 0.7500\n",
            "Epoch 215/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.0835 - accuracy: 0.9611 - val_loss: 0.8783 - val_accuracy: 0.7000\n",
            "Epoch 216/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.0992 - accuracy: 0.9556 - val_loss: 0.8832 - val_accuracy: 0.7000\n",
            "Epoch 217/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.1394 - accuracy: 0.9444 - val_loss: 1.0488 - val_accuracy: 0.7000\n",
            "Epoch 218/500\n",
            "3/3 [==============================] - 0s 45ms/step - loss: 0.2041 - accuracy: 0.9222 - val_loss: 0.4845 - val_accuracy: 0.8000\n",
            "Epoch 219/500\n",
            "3/3 [==============================] - 0s 45ms/step - loss: 0.1697 - accuracy: 0.9333 - val_loss: 0.9382 - val_accuracy: 0.7500\n",
            "Epoch 220/500\n",
            "3/3 [==============================] - 0s 48ms/step - loss: 0.0862 - accuracy: 0.9722 - val_loss: 1.0458 - val_accuracy: 0.7000\n",
            "Epoch 221/500\n",
            "3/3 [==============================] - 0s 54ms/step - loss: 0.1614 - accuracy: 0.9278 - val_loss: 0.8415 - val_accuracy: 0.7500\n",
            "Epoch 222/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.1086 - accuracy: 0.9611 - val_loss: 0.8557 - val_accuracy: 0.7000\n",
            "Epoch 223/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.1018 - accuracy: 0.9722 - val_loss: 0.8493 - val_accuracy: 0.7500\n",
            "Epoch 224/500\n",
            "3/3 [==============================] - 0s 44ms/step - loss: 0.1026 - accuracy: 0.9611 - val_loss: 1.4542 - val_accuracy: 0.7000\n",
            "Epoch 225/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.1071 - accuracy: 0.9667 - val_loss: 0.9308 - val_accuracy: 0.7000\n",
            "Epoch 226/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0843 - accuracy: 0.9778 - val_loss: 0.6791 - val_accuracy: 0.7000\n",
            "Epoch 227/500\n",
            "3/3 [==============================] - 0s 42ms/step - loss: 0.0486 - accuracy: 0.9889 - val_loss: 1.0741 - val_accuracy: 0.7000\n",
            "Epoch 228/500\n",
            "3/3 [==============================] - 0s 48ms/step - loss: 0.0508 - accuracy: 0.9778 - val_loss: 1.4642 - val_accuracy: 0.7500\n",
            "Epoch 229/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.0533 - accuracy: 0.9889 - val_loss: 0.7846 - val_accuracy: 0.7000\n",
            "Epoch 230/500\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 0.0553 - accuracy: 0.9889 - val_loss: 0.8784 - val_accuracy: 0.7500\n",
            "Epoch 231/500\n",
            "3/3 [==============================] - 0s 41ms/step - loss: 0.0433 - accuracy: 0.9889 - val_loss: 1.2020 - val_accuracy: 0.7000\n",
            "Epoch 232/500\n",
            "3/3 [==============================] - 0s 46ms/step - loss: 0.0460 - accuracy: 0.9889 - val_loss: 1.0941 - val_accuracy: 0.7500\n",
            "Epoch 233/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.0458 - accuracy: 0.9833 - val_loss: 1.1199 - val_accuracy: 0.7000\n",
            "Epoch 234/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.0840 - accuracy: 0.9722 - val_loss: 0.9635 - val_accuracy: 0.7000\n",
            "Epoch 235/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0492 - accuracy: 0.9833 - val_loss: 1.8886 - val_accuracy: 0.7500\n",
            "Epoch 236/500\n",
            "3/3 [==============================] - 0s 37ms/step - loss: 0.0991 - accuracy: 0.9722 - val_loss: 1.1797 - val_accuracy: 0.7500\n",
            "Epoch 237/500\n",
            "3/3 [==============================] - 0s 47ms/step - loss: 0.0505 - accuracy: 0.9778 - val_loss: 0.6922 - val_accuracy: 0.7000\n",
            "Epoch 238/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0412 - accuracy: 0.9889 - val_loss: 0.9380 - val_accuracy: 0.7000\n",
            "Epoch 239/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0345 - accuracy: 0.9944 - val_loss: 1.4422 - val_accuracy: 0.7500\n",
            "Epoch 240/500\n",
            "3/3 [==============================] - 0s 46ms/step - loss: 0.0557 - accuracy: 0.9722 - val_loss: 1.5006 - val_accuracy: 0.6500\n",
            "Epoch 241/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.1143 - accuracy: 0.9667 - val_loss: 1.6247 - val_accuracy: 0.7000\n",
            "Epoch 242/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.0758 - accuracy: 0.9778 - val_loss: 1.3828 - val_accuracy: 0.7500\n",
            "Epoch 243/500\n",
            "3/3 [==============================] - 0s 41ms/step - loss: 0.0644 - accuracy: 0.9778 - val_loss: 1.3637 - val_accuracy: 0.7500\n",
            "Epoch 244/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.0805 - accuracy: 0.9667 - val_loss: 1.6542 - val_accuracy: 0.7500\n",
            "Epoch 245/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0511 - accuracy: 0.9833 - val_loss: 0.9583 - val_accuracy: 0.7000\n",
            "Epoch 246/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.0957 - accuracy: 0.9667 - val_loss: 1.2334 - val_accuracy: 0.7500\n",
            "Epoch 247/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0749 - accuracy: 0.9722 - val_loss: 1.0368 - val_accuracy: 0.7500\n",
            "Epoch 248/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0608 - accuracy: 0.9778 - val_loss: 1.6040 - val_accuracy: 0.7000\n",
            "Epoch 249/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0597 - accuracy: 0.9778 - val_loss: 1.0121 - val_accuracy: 0.7500\n",
            "Epoch 250/500\n",
            "3/3 [==============================] - 0s 46ms/step - loss: 0.0557 - accuracy: 0.9722 - val_loss: 1.1655 - val_accuracy: 0.7500\n",
            "Epoch 251/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0589 - accuracy: 0.9833 - val_loss: 1.5453 - val_accuracy: 0.7500\n",
            "Epoch 252/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0722 - accuracy: 0.9722 - val_loss: 0.9740 - val_accuracy: 0.7000\n",
            "Epoch 253/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.0479 - accuracy: 0.9889 - val_loss: 1.4905 - val_accuracy: 0.7500\n",
            "Epoch 254/500\n",
            "3/3 [==============================] - 0s 42ms/step - loss: 0.0511 - accuracy: 0.9722 - val_loss: 0.8152 - val_accuracy: 0.7000\n",
            "Epoch 255/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0422 - accuracy: 0.9778 - val_loss: 1.1717 - val_accuracy: 0.7000\n",
            "Epoch 256/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0238 - accuracy: 0.9944 - val_loss: 1.8139 - val_accuracy: 0.7500\n",
            "Epoch 257/500\n",
            "3/3 [==============================] - 0s 41ms/step - loss: 0.0482 - accuracy: 0.9833 - val_loss: 1.1696 - val_accuracy: 0.8000\n",
            "Epoch 258/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0393 - accuracy: 0.9833 - val_loss: 0.9701 - val_accuracy: 0.7000\n",
            "Epoch 259/500\n",
            "3/3 [==============================] - 0s 45ms/step - loss: 0.0302 - accuracy: 0.9889 - val_loss: 1.5304 - val_accuracy: 0.7500\n",
            "Epoch 260/500\n",
            "3/3 [==============================] - 0s 42ms/step - loss: 0.0302 - accuracy: 0.9889 - val_loss: 1.3260 - val_accuracy: 0.8000\n",
            "Epoch 261/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0270 - accuracy: 0.9889 - val_loss: 1.2303 - val_accuracy: 0.7500\n",
            "Epoch 262/500\n",
            "3/3 [==============================] - 0s 52ms/step - loss: 0.0201 - accuracy: 0.9944 - val_loss: 1.2468 - val_accuracy: 0.7000\n",
            "Epoch 263/500\n",
            "3/3 [==============================] - 0s 42ms/step - loss: 0.0194 - accuracy: 0.9889 - val_loss: 1.2274 - val_accuracy: 0.7000\n",
            "Epoch 264/500\n",
            "3/3 [==============================] - 0s 47ms/step - loss: 0.0205 - accuracy: 1.0000 - val_loss: 1.5134 - val_accuracy: 0.7500\n",
            "Epoch 265/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0387 - accuracy: 0.9889 - val_loss: 1.6685 - val_accuracy: 0.7500\n",
            "Epoch 266/500\n",
            "3/3 [==============================] - 0s 46ms/step - loss: 0.0348 - accuracy: 0.9833 - val_loss: 1.4032 - val_accuracy: 0.7000\n",
            "Epoch 267/500\n",
            "3/3 [==============================] - 0s 44ms/step - loss: 0.0357 - accuracy: 0.9833 - val_loss: 1.3228 - val_accuracy: 0.7000\n",
            "Epoch 268/500\n",
            "3/3 [==============================] - 0s 41ms/step - loss: 0.0584 - accuracy: 0.9778 - val_loss: 1.5544 - val_accuracy: 0.7500\n",
            "Epoch 269/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0422 - accuracy: 0.9889 - val_loss: 1.0208 - val_accuracy: 0.7000\n",
            "Epoch 270/500\n",
            "3/3 [==============================] - 0s 46ms/step - loss: 0.0385 - accuracy: 0.9833 - val_loss: 2.3725 - val_accuracy: 0.7500\n",
            "Epoch 271/500\n",
            "3/3 [==============================] - 0s 42ms/step - loss: 0.0387 - accuracy: 0.9889 - val_loss: 1.5989 - val_accuracy: 0.7500\n",
            "Epoch 272/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0278 - accuracy: 1.0000 - val_loss: 0.9764 - val_accuracy: 0.7500\n",
            "Epoch 273/500\n",
            "3/3 [==============================] - 0s 48ms/step - loss: 0.0300 - accuracy: 0.9944 - val_loss: 1.4959 - val_accuracy: 0.7500\n",
            "Epoch 274/500\n",
            "3/3 [==============================] - 0s 52ms/step - loss: 0.0359 - accuracy: 0.9833 - val_loss: 1.7893 - val_accuracy: 0.7500\n",
            "Epoch 275/500\n",
            "3/3 [==============================] - 0s 41ms/step - loss: 0.0203 - accuracy: 0.9944 - val_loss: 1.4408 - val_accuracy: 0.7000\n",
            "Epoch 276/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0247 - accuracy: 0.9889 - val_loss: 1.3064 - val_accuracy: 0.7500\n",
            "Epoch 277/500\n",
            "3/3 [==============================] - 0s 45ms/step - loss: 0.0309 - accuracy: 0.9833 - val_loss: 1.6243 - val_accuracy: 0.7500\n",
            "Epoch 278/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.0218 - accuracy: 0.9889 - val_loss: 1.6784 - val_accuracy: 0.7500\n",
            "Epoch 279/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0219 - accuracy: 0.9944 - val_loss: 1.0393 - val_accuracy: 0.7500\n",
            "Epoch 280/500\n",
            "3/3 [==============================] - 0s 47ms/step - loss: 0.0519 - accuracy: 0.9889 - val_loss: 1.8373 - val_accuracy: 0.7500\n",
            "Epoch 281/500\n",
            "3/3 [==============================] - 0s 42ms/step - loss: 0.0363 - accuracy: 0.9944 - val_loss: 1.7659 - val_accuracy: 0.7500\n",
            "Epoch 282/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0390 - accuracy: 0.9833 - val_loss: 1.5420 - val_accuracy: 0.7500\n",
            "Epoch 283/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0259 - accuracy: 0.9944 - val_loss: 1.6638 - val_accuracy: 0.7500\n",
            "Epoch 284/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0225 - accuracy: 0.9889 - val_loss: 0.9785 - val_accuracy: 0.7500\n",
            "Epoch 285/500\n",
            "3/3 [==============================] - 0s 45ms/step - loss: 0.0279 - accuracy: 0.9944 - val_loss: 1.3548 - val_accuracy: 0.7500\n",
            "Epoch 286/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.0229 - accuracy: 0.9944 - val_loss: 1.8219 - val_accuracy: 0.7500\n",
            "Epoch 287/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0188 - accuracy: 0.9889 - val_loss: 1.0345 - val_accuracy: 0.8000\n",
            "Epoch 288/500\n",
            "3/3 [==============================] - 0s 58ms/step - loss: 0.0199 - accuracy: 0.9944 - val_loss: 1.4819 - val_accuracy: 0.7500\n",
            "Epoch 289/500\n",
            "3/3 [==============================] - 0s 64ms/step - loss: 0.0202 - accuracy: 0.9944 - val_loss: 1.8486 - val_accuracy: 0.7500\n",
            "Epoch 290/500\n",
            "3/3 [==============================] - 0s 68ms/step - loss: 0.0184 - accuracy: 0.9944 - val_loss: 1.5894 - val_accuracy: 0.7500\n",
            "Epoch 291/500\n",
            "3/3 [==============================] - 0s 66ms/step - loss: 0.0223 - accuracy: 0.9944 - val_loss: 1.4333 - val_accuracy: 0.7000\n",
            "Epoch 292/500\n",
            "3/3 [==============================] - 0s 64ms/step - loss: 0.0191 - accuracy: 0.9944 - val_loss: 1.7178 - val_accuracy: 0.7500\n",
            "Epoch 293/500\n",
            "3/3 [==============================] - 0s 65ms/step - loss: 0.0338 - accuracy: 0.9889 - val_loss: 1.7504 - val_accuracy: 0.7500\n",
            "Epoch 294/500\n",
            "3/3 [==============================] - 0s 67ms/step - loss: 0.0513 - accuracy: 0.9722 - val_loss: 1.6335 - val_accuracy: 0.7000\n",
            "Epoch 295/500\n",
            "3/3 [==============================] - 0s 69ms/step - loss: 0.0675 - accuracy: 0.9833 - val_loss: 1.7510 - val_accuracy: 0.7500\n",
            "Epoch 296/500\n",
            "3/3 [==============================] - 0s 60ms/step - loss: 0.1018 - accuracy: 0.9667 - val_loss: 1.2139 - val_accuracy: 0.7000\n",
            "Epoch 297/500\n",
            "3/3 [==============================] - 0s 63ms/step - loss: 0.2105 - accuracy: 0.9222 - val_loss: 1.3420 - val_accuracy: 0.7000\n",
            "Epoch 298/500\n",
            "3/3 [==============================] - 0s 67ms/step - loss: 0.3723 - accuracy: 0.8833 - val_loss: 2.2692 - val_accuracy: 0.6500\n",
            "Epoch 299/500\n",
            "3/3 [==============================] - 0s 61ms/step - loss: 0.2912 - accuracy: 0.8889 - val_loss: 1.5653 - val_accuracy: 0.6000\n",
            "Epoch 300/500\n",
            "3/3 [==============================] - 0s 68ms/step - loss: 0.3476 - accuracy: 0.8389 - val_loss: 1.1704 - val_accuracy: 0.7500\n",
            "Epoch 301/500\n",
            "3/3 [==============================] - 0s 81ms/step - loss: 0.3284 - accuracy: 0.8556 - val_loss: 1.5052 - val_accuracy: 0.7000\n",
            "Epoch 302/500\n",
            "3/3 [==============================] - 0s 68ms/step - loss: 0.3329 - accuracy: 0.8778 - val_loss: 1.1597 - val_accuracy: 0.5500\n",
            "Epoch 303/500\n",
            "3/3 [==============================] - 0s 65ms/step - loss: 0.2241 - accuracy: 0.9333 - val_loss: 1.2767 - val_accuracy: 0.7500\n",
            "Epoch 304/500\n",
            "3/3 [==============================] - 0s 63ms/step - loss: 0.2091 - accuracy: 0.9167 - val_loss: 1.3843 - val_accuracy: 0.7000\n",
            "Epoch 305/500\n",
            "3/3 [==============================] - 0s 68ms/step - loss: 0.1047 - accuracy: 0.9778 - val_loss: 1.0091 - val_accuracy: 0.7000\n",
            "Epoch 306/500\n",
            "3/3 [==============================] - 0s 77ms/step - loss: 0.1079 - accuracy: 0.9778 - val_loss: 1.5427 - val_accuracy: 0.7500\n",
            "Epoch 307/500\n",
            "3/3 [==============================] - 0s 73ms/step - loss: 0.0865 - accuracy: 0.9722 - val_loss: 1.1081 - val_accuracy: 0.7000\n",
            "Epoch 308/500\n",
            "3/3 [==============================] - 0s 68ms/step - loss: 0.0888 - accuracy: 0.9556 - val_loss: 1.1926 - val_accuracy: 0.7000\n",
            "Epoch 309/500\n",
            "3/3 [==============================] - 0s 66ms/step - loss: 0.0363 - accuracy: 0.9944 - val_loss: 1.5291 - val_accuracy: 0.7500\n",
            "Epoch 310/500\n",
            "3/3 [==============================] - 0s 70ms/step - loss: 0.0575 - accuracy: 0.9722 - val_loss: 1.0711 - val_accuracy: 0.7000\n",
            "Epoch 311/500\n",
            "3/3 [==============================] - 0s 66ms/step - loss: 0.0315 - accuracy: 1.0000 - val_loss: 1.3903 - val_accuracy: 0.7000\n",
            "Epoch 312/500\n",
            "3/3 [==============================] - 0s 72ms/step - loss: 0.0433 - accuracy: 0.9889 - val_loss: 1.7283 - val_accuracy: 0.7000\n",
            "Epoch 313/500\n",
            "3/3 [==============================] - 0s 64ms/step - loss: 0.0588 - accuracy: 0.9611 - val_loss: 1.0809 - val_accuracy: 0.7000\n",
            "Epoch 314/500\n",
            "3/3 [==============================] - 0s 58ms/step - loss: 0.0934 - accuracy: 0.9722 - val_loss: 1.2554 - val_accuracy: 0.7500\n",
            "Epoch 315/500\n",
            "3/3 [==============================] - 0s 63ms/step - loss: 0.0892 - accuracy: 0.9722 - val_loss: 1.3269 - val_accuracy: 0.7500\n",
            "Epoch 316/500\n",
            "3/3 [==============================] - 0s 47ms/step - loss: 0.0688 - accuracy: 0.9833 - val_loss: 1.0155 - val_accuracy: 0.7000\n",
            "Epoch 317/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0859 - accuracy: 0.9778 - val_loss: 2.0463 - val_accuracy: 0.7500\n",
            "Epoch 318/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.1317 - accuracy: 0.9389 - val_loss: 0.9925 - val_accuracy: 0.7500\n",
            "Epoch 319/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0885 - accuracy: 0.9667 - val_loss: 1.7639 - val_accuracy: 0.7500\n",
            "Epoch 320/500\n",
            "3/3 [==============================] - 0s 49ms/step - loss: 0.0596 - accuracy: 0.9833 - val_loss: 1.9333 - val_accuracy: 0.7500\n",
            "Epoch 321/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0505 - accuracy: 0.9889 - val_loss: 0.8289 - val_accuracy: 0.7500\n",
            "Epoch 322/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0390 - accuracy: 0.9889 - val_loss: 0.8380 - val_accuracy: 0.7500\n",
            "Epoch 323/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0236 - accuracy: 0.9944 - val_loss: 1.6586 - val_accuracy: 0.7000\n",
            "Epoch 324/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0756 - accuracy: 0.9611 - val_loss: 1.4240 - val_accuracy: 0.7500\n",
            "Epoch 325/500\n",
            "3/3 [==============================] - 0s 42ms/step - loss: 0.0185 - accuracy: 0.9944 - val_loss: 0.7691 - val_accuracy: 0.7500\n",
            "Epoch 326/500\n",
            "3/3 [==============================] - 0s 45ms/step - loss: 0.0607 - accuracy: 0.9889 - val_loss: 1.2138 - val_accuracy: 0.7000\n",
            "Epoch 327/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0316 - accuracy: 0.9889 - val_loss: 1.8880 - val_accuracy: 0.7000\n",
            "Epoch 328/500\n",
            "3/3 [==============================] - 0s 42ms/step - loss: 0.0418 - accuracy: 0.9889 - val_loss: 1.5442 - val_accuracy: 0.7000\n",
            "Epoch 329/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0333 - accuracy: 0.9889 - val_loss: 1.4632 - val_accuracy: 0.7500\n",
            "Epoch 330/500\n",
            "3/3 [==============================] - 0s 46ms/step - loss: 0.0470 - accuracy: 0.9833 - val_loss: 1.1167 - val_accuracy: 0.7000\n",
            "Epoch 331/500\n",
            "3/3 [==============================] - 0s 46ms/step - loss: 0.0193 - accuracy: 1.0000 - val_loss: 1.2801 - val_accuracy: 0.7000\n",
            "Epoch 332/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0388 - accuracy: 0.9944 - val_loss: 1.9044 - val_accuracy: 0.7500\n",
            "Epoch 333/500\n",
            "3/3 [==============================] - 0s 45ms/step - loss: 0.0170 - accuracy: 1.0000 - val_loss: 1.8441 - val_accuracy: 0.7500\n",
            "Epoch 334/500\n",
            "3/3 [==============================] - 0s 48ms/step - loss: 0.0141 - accuracy: 0.9944 - val_loss: 1.7421 - val_accuracy: 0.7000\n",
            "Epoch 335/500\n",
            "3/3 [==============================] - 0s 44ms/step - loss: 0.0263 - accuracy: 0.9889 - val_loss: 1.6152 - val_accuracy: 0.7000\n",
            "Epoch 336/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0135 - accuracy: 0.9944 - val_loss: 1.6011 - val_accuracy: 0.7500\n",
            "Epoch 337/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.0162 - accuracy: 1.0000 - val_loss: 1.8029 - val_accuracy: 0.7500\n",
            "Epoch 338/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.0125 - accuracy: 1.0000 - val_loss: 2.1200 - val_accuracy: 0.7500\n",
            "Epoch 339/500\n",
            "3/3 [==============================] - 0s 47ms/step - loss: 0.0152 - accuracy: 1.0000 - val_loss: 1.5188 - val_accuracy: 0.7500\n",
            "Epoch 340/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0145 - accuracy: 1.0000 - val_loss: 1.3415 - val_accuracy: 0.7500\n",
            "Epoch 341/500\n",
            "3/3 [==============================] - 0s 41ms/step - loss: 0.0213 - accuracy: 1.0000 - val_loss: 1.5803 - val_accuracy: 0.7500\n",
            "Epoch 342/500\n",
            "3/3 [==============================] - 0s 43ms/step - loss: 0.0156 - accuracy: 0.9944 - val_loss: 1.6465 - val_accuracy: 0.7500\n",
            "Epoch 343/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0220 - accuracy: 0.9889 - val_loss: 1.5239 - val_accuracy: 0.7000\n",
            "Epoch 344/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0111 - accuracy: 1.0000 - val_loss: 1.8129 - val_accuracy: 0.7000\n",
            "Epoch 345/500\n",
            "3/3 [==============================] - 0s 51ms/step - loss: 0.0157 - accuracy: 0.9944 - val_loss: 2.1956 - val_accuracy: 0.7000\n",
            "Epoch 346/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0365 - accuracy: 0.9889 - val_loss: 1.3132 - val_accuracy: 0.6500\n",
            "Epoch 347/500\n",
            "3/3 [==============================] - 0s 46ms/step - loss: 0.0283 - accuracy: 0.9944 - val_loss: 1.5123 - val_accuracy: 0.7000\n",
            "Epoch 348/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0682 - accuracy: 0.9611 - val_loss: 1.3471 - val_accuracy: 0.7500\n",
            "Epoch 349/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0638 - accuracy: 0.9722 - val_loss: 1.5109 - val_accuracy: 0.7000\n",
            "Epoch 350/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0374 - accuracy: 0.9889 - val_loss: 2.6855 - val_accuracy: 0.7500\n",
            "Epoch 351/500\n",
            "3/3 [==============================] - 0s 53ms/step - loss: 0.0526 - accuracy: 0.9778 - val_loss: 1.9709 - val_accuracy: 0.7500\n",
            "Epoch 352/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0318 - accuracy: 0.9833 - val_loss: 1.2761 - val_accuracy: 0.7500\n",
            "Epoch 353/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0362 - accuracy: 0.9944 - val_loss: 1.5501 - val_accuracy: 0.7500\n",
            "Epoch 354/500\n",
            "3/3 [==============================] - 0s 52ms/step - loss: 0.0371 - accuracy: 0.9889 - val_loss: 1.3862 - val_accuracy: 0.7500\n",
            "Epoch 355/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0176 - accuracy: 1.0000 - val_loss: 1.5083 - val_accuracy: 0.7500\n",
            "Epoch 356/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0114 - accuracy: 1.0000 - val_loss: 1.4564 - val_accuracy: 0.7500\n",
            "Epoch 357/500\n",
            "3/3 [==============================] - 0s 47ms/step - loss: 0.0182 - accuracy: 0.9944 - val_loss: 1.5926 - val_accuracy: 0.7000\n",
            "Epoch 358/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0119 - accuracy: 1.0000 - val_loss: 1.6205 - val_accuracy: 0.7000\n",
            "Epoch 359/500\n",
            "3/3 [==============================] - 0s 48ms/step - loss: 0.0130 - accuracy: 0.9944 - val_loss: 1.7916 - val_accuracy: 0.7500\n",
            "Epoch 360/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0115 - accuracy: 0.9944 - val_loss: 1.6857 - val_accuracy: 0.7000\n",
            "Epoch 361/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0174 - accuracy: 0.9944 - val_loss: 1.6765 - val_accuracy: 0.7500\n",
            "Epoch 362/500\n",
            "3/3 [==============================] - 0s 47ms/step - loss: 0.0131 - accuracy: 1.0000 - val_loss: 1.4565 - val_accuracy: 0.7500\n",
            "Epoch 363/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.0118 - accuracy: 1.0000 - val_loss: 1.1374 - val_accuracy: 0.7500\n",
            "Epoch 364/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0136 - accuracy: 1.0000 - val_loss: 1.9913 - val_accuracy: 0.7500\n",
            "Epoch 365/500\n",
            "3/3 [==============================] - 0s 38ms/step - loss: 0.0115 - accuracy: 0.9944 - val_loss: 2.6249 - val_accuracy: 0.7500\n",
            "Epoch 366/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0199 - accuracy: 0.9944 - val_loss: 1.8582 - val_accuracy: 0.7500\n",
            "Epoch 367/500\n",
            "3/3 [==============================] - 0s 45ms/step - loss: 0.0101 - accuracy: 1.0000 - val_loss: 1.2444 - val_accuracy: 0.7000\n",
            "Epoch 368/500\n",
            "3/3 [==============================] - 0s 47ms/step - loss: 0.0126 - accuracy: 1.0000 - val_loss: 1.6198 - val_accuracy: 0.7500\n",
            "Epoch 369/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0111 - accuracy: 1.0000 - val_loss: 2.0917 - val_accuracy: 0.7500\n",
            "Epoch 370/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0071 - accuracy: 1.0000 - val_loss: 2.2256 - val_accuracy: 0.7500\n",
            "Epoch 371/500\n",
            "3/3 [==============================] - 0s 48ms/step - loss: 0.0101 - accuracy: 1.0000 - val_loss: 1.7055 - val_accuracy: 0.7500\n",
            "Epoch 372/500\n",
            "3/3 [==============================] - 0s 49ms/step - loss: 0.0105 - accuracy: 1.0000 - val_loss: 1.6557 - val_accuracy: 0.7500\n",
            "Epoch 373/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0064 - accuracy: 1.0000 - val_loss: 1.6516 - val_accuracy: 0.7500\n",
            "Epoch 374/500\n",
            "3/3 [==============================] - 0s 52ms/step - loss: 0.0084 - accuracy: 1.0000 - val_loss: 1.5663 - val_accuracy: 0.7500\n",
            "Epoch 375/500\n",
            "3/3 [==============================] - 0s 42ms/step - loss: 0.0030 - accuracy: 1.0000 - val_loss: 1.5950 - val_accuracy: 0.7000\n",
            "Epoch 376/500\n",
            "3/3 [==============================] - 0s 47ms/step - loss: 0.0196 - accuracy: 0.9889 - val_loss: 1.7929 - val_accuracy: 0.7500\n",
            "Epoch 377/500\n",
            "3/3 [==============================] - 0s 42ms/step - loss: 0.0111 - accuracy: 0.9944 - val_loss: 1.7555 - val_accuracy: 0.7500\n",
            "Epoch 378/500\n",
            "3/3 [==============================] - 0s 48ms/step - loss: 0.0088 - accuracy: 1.0000 - val_loss: 1.5054 - val_accuracy: 0.7000\n",
            "Epoch 379/500\n",
            "3/3 [==============================] - 0s 49ms/step - loss: 0.0088 - accuracy: 1.0000 - val_loss: 1.4067 - val_accuracy: 0.7500\n",
            "Epoch 380/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0123 - accuracy: 1.0000 - val_loss: 2.2879 - val_accuracy: 0.7000\n",
            "Epoch 381/500\n",
            "3/3 [==============================] - 0s 48ms/step - loss: 0.0460 - accuracy: 0.9889 - val_loss: 2.0815 - val_accuracy: 0.7000\n",
            "Epoch 382/500\n",
            "3/3 [==============================] - 0s 45ms/step - loss: 0.0089 - accuracy: 1.0000 - val_loss: 2.2090 - val_accuracy: 0.7500\n",
            "Epoch 383/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0578 - accuracy: 0.9778 - val_loss: 1.9332 - val_accuracy: 0.7000\n",
            "Epoch 384/500\n",
            "3/3 [==============================] - 0s 51ms/step - loss: 0.0595 - accuracy: 0.9722 - val_loss: 1.2697 - val_accuracy: 0.7500\n",
            "Epoch 385/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0565 - accuracy: 0.9889 - val_loss: 1.7733 - val_accuracy: 0.7500\n",
            "Epoch 386/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0149 - accuracy: 1.0000 - val_loss: 1.2416 - val_accuracy: 0.6500\n",
            "Epoch 387/500\n",
            "3/3 [==============================] - 0s 49ms/step - loss: 0.0575 - accuracy: 0.9722 - val_loss: 1.7723 - val_accuracy: 0.7500\n",
            "Epoch 388/500\n",
            "3/3 [==============================] - 0s 41ms/step - loss: 0.0382 - accuracy: 0.9889 - val_loss: 1.9609 - val_accuracy: 0.7000\n",
            "Epoch 389/500\n",
            "3/3 [==============================] - 0s 42ms/step - loss: 0.0424 - accuracy: 0.9889 - val_loss: 0.9842 - val_accuracy: 0.6500\n",
            "Epoch 390/500\n",
            "3/3 [==============================] - 0s 45ms/step - loss: 0.0594 - accuracy: 0.9833 - val_loss: 2.1090 - val_accuracy: 0.7500\n",
            "Epoch 391/500\n",
            "3/3 [==============================] - 0s 47ms/step - loss: 0.0357 - accuracy: 0.9889 - val_loss: 1.9807 - val_accuracy: 0.7000\n",
            "Epoch 392/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0578 - accuracy: 0.9722 - val_loss: 2.3244 - val_accuracy: 0.7500\n",
            "Epoch 393/500\n",
            "3/3 [==============================] - 0s 46ms/step - loss: 0.0329 - accuracy: 0.9944 - val_loss: 1.2694 - val_accuracy: 0.8000\n",
            "Epoch 394/500\n",
            "3/3 [==============================] - 0s 41ms/step - loss: 0.0550 - accuracy: 0.9778 - val_loss: 1.5107 - val_accuracy: 0.7000\n",
            "Epoch 395/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0244 - accuracy: 0.9889 - val_loss: 1.7844 - val_accuracy: 0.7000\n",
            "Epoch 396/500\n",
            "3/3 [==============================] - 0s 52ms/step - loss: 0.0222 - accuracy: 0.9889 - val_loss: 1.4453 - val_accuracy: 0.7500\n",
            "Epoch 397/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0318 - accuracy: 0.9778 - val_loss: 0.7904 - val_accuracy: 0.7000\n",
            "Epoch 398/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0280 - accuracy: 0.9944 - val_loss: 1.6174 - val_accuracy: 0.7000\n",
            "Epoch 399/500\n",
            "3/3 [==============================] - 0s 66ms/step - loss: 0.0236 - accuracy: 0.9944 - val_loss: 1.8791 - val_accuracy: 0.7000\n",
            "Epoch 400/500\n",
            "3/3 [==============================] - 0s 57ms/step - loss: 0.0066 - accuracy: 1.0000 - val_loss: 1.2736 - val_accuracy: 0.7000\n",
            "Epoch 401/500\n",
            "3/3 [==============================] - 0s 65ms/step - loss: 0.0201 - accuracy: 0.9944 - val_loss: 1.9060 - val_accuracy: 0.7500\n",
            "Epoch 402/500\n",
            "3/3 [==============================] - 0s 74ms/step - loss: 0.0232 - accuracy: 0.9944 - val_loss: 1.2152 - val_accuracy: 0.7000\n",
            "Epoch 403/500\n",
            "3/3 [==============================] - 0s 73ms/step - loss: 0.0283 - accuracy: 0.9944 - val_loss: 1.6819 - val_accuracy: 0.7000\n",
            "Epoch 404/500\n",
            "3/3 [==============================] - 0s 62ms/step - loss: 0.0144 - accuracy: 1.0000 - val_loss: 1.8688 - val_accuracy: 0.7500\n",
            "Epoch 405/500\n",
            "3/3 [==============================] - 0s 72ms/step - loss: 0.0111 - accuracy: 0.9944 - val_loss: 1.1828 - val_accuracy: 0.7000\n",
            "Epoch 406/500\n",
            "3/3 [==============================] - 0s 79ms/step - loss: 0.0099 - accuracy: 0.9944 - val_loss: 1.1280 - val_accuracy: 0.7000\n",
            "Epoch 407/500\n",
            "3/3 [==============================] - 0s 62ms/step - loss: 0.0046 - accuracy: 1.0000 - val_loss: 1.5118 - val_accuracy: 0.7500\n",
            "Epoch 408/500\n",
            "3/3 [==============================] - 0s 75ms/step - loss: 0.0098 - accuracy: 0.9944 - val_loss: 1.3685 - val_accuracy: 0.7500\n",
            "Epoch 409/500\n",
            "3/3 [==============================] - 0s 75ms/step - loss: 0.0104 - accuracy: 1.0000 - val_loss: 1.0545 - val_accuracy: 0.7500\n",
            "Epoch 410/500\n",
            "3/3 [==============================] - 0s 73ms/step - loss: 0.0103 - accuracy: 1.0000 - val_loss: 0.9088 - val_accuracy: 0.7500\n",
            "Epoch 411/500\n",
            "3/3 [==============================] - 0s 63ms/step - loss: 0.0050 - accuracy: 1.0000 - val_loss: 1.1708 - val_accuracy: 0.7500\n",
            "Epoch 412/500\n",
            "3/3 [==============================] - 0s 65ms/step - loss: 0.0055 - accuracy: 1.0000 - val_loss: 1.4155 - val_accuracy: 0.7500\n",
            "Epoch 413/500\n",
            "3/3 [==============================] - 0s 63ms/step - loss: 0.0050 - accuracy: 1.0000 - val_loss: 1.3987 - val_accuracy: 0.7500\n",
            "Epoch 414/500\n",
            "3/3 [==============================] - 0s 67ms/step - loss: 0.0081 - accuracy: 0.9944 - val_loss: 1.4513 - val_accuracy: 0.7500\n",
            "Epoch 415/500\n",
            "3/3 [==============================] - 0s 75ms/step - loss: 0.0112 - accuracy: 1.0000 - val_loss: 1.6699 - val_accuracy: 0.7500\n",
            "Epoch 416/500\n",
            "3/3 [==============================] - 0s 69ms/step - loss: 0.0043 - accuracy: 1.0000 - val_loss: 1.7449 - val_accuracy: 0.7500\n",
            "Epoch 417/500\n",
            "3/3 [==============================] - 0s 67ms/step - loss: 0.0065 - accuracy: 1.0000 - val_loss: 1.5004 - val_accuracy: 0.7500\n",
            "Epoch 418/500\n",
            "3/3 [==============================] - 0s 61ms/step - loss: 0.0067 - accuracy: 1.0000 - val_loss: 1.2929 - val_accuracy: 0.7000\n",
            "Epoch 419/500\n",
            "3/3 [==============================] - 0s 71ms/step - loss: 0.0041 - accuracy: 1.0000 - val_loss: 1.3312 - val_accuracy: 0.7000\n",
            "Epoch 420/500\n",
            "3/3 [==============================] - 0s 65ms/step - loss: 0.0068 - accuracy: 1.0000 - val_loss: 1.5682 - val_accuracy: 0.7500\n",
            "Epoch 421/500\n",
            "3/3 [==============================] - 0s 68ms/step - loss: 0.0166 - accuracy: 0.9944 - val_loss: 1.3045 - val_accuracy: 0.7000\n",
            "Epoch 422/500\n",
            "3/3 [==============================] - 0s 66ms/step - loss: 0.0483 - accuracy: 0.9833 - val_loss: 1.7265 - val_accuracy: 0.7500\n",
            "Epoch 423/500\n",
            "3/3 [==============================] - 0s 65ms/step - loss: 0.0136 - accuracy: 1.0000 - val_loss: 3.2685 - val_accuracy: 0.7500\n",
            "Epoch 424/500\n",
            "3/3 [==============================] - 0s 61ms/step - loss: 0.0432 - accuracy: 0.9722 - val_loss: 1.1203 - val_accuracy: 0.7500\n",
            "Epoch 425/500\n",
            "3/3 [==============================] - 0s 59ms/step - loss: 0.0476 - accuracy: 0.9833 - val_loss: 2.3488 - val_accuracy: 0.7500\n",
            "Epoch 426/500\n",
            "3/3 [==============================] - 0s 72ms/step - loss: 0.0428 - accuracy: 0.9833 - val_loss: 2.1200 - val_accuracy: 0.7500\n",
            "Epoch 427/500\n",
            "3/3 [==============================] - 0s 69ms/step - loss: 0.0306 - accuracy: 0.9944 - val_loss: 1.1813 - val_accuracy: 0.7500\n",
            "Epoch 428/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0111 - accuracy: 0.9944 - val_loss: 1.1924 - val_accuracy: 0.7000\n",
            "Epoch 429/500\n",
            "3/3 [==============================] - 0s 43ms/step - loss: 0.0101 - accuracy: 0.9944 - val_loss: 1.4475 - val_accuracy: 0.7500\n",
            "Epoch 430/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0212 - accuracy: 0.9889 - val_loss: 1.3258 - val_accuracy: 0.8000\n",
            "Epoch 431/500\n",
            "3/3 [==============================] - 0s 41ms/step - loss: 0.0219 - accuracy: 0.9944 - val_loss: 1.1307 - val_accuracy: 0.7500\n",
            "Epoch 432/500\n",
            "3/3 [==============================] - 0s 44ms/step - loss: 0.0051 - accuracy: 1.0000 - val_loss: 1.1319 - val_accuracy: 0.7500\n",
            "Epoch 433/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0142 - accuracy: 1.0000 - val_loss: 1.4285 - val_accuracy: 0.7500\n",
            "Epoch 434/500\n",
            "3/3 [==============================] - 0s 50ms/step - loss: 0.0237 - accuracy: 0.9944 - val_loss: 2.4769 - val_accuracy: 0.7500\n",
            "Epoch 435/500\n",
            "3/3 [==============================] - 0s 42ms/step - loss: 0.0390 - accuracy: 0.9889 - val_loss: 1.3277 - val_accuracy: 0.7500\n",
            "Epoch 436/500\n",
            "3/3 [==============================] - 0s 41ms/step - loss: 0.0222 - accuracy: 0.9889 - val_loss: 2.0676 - val_accuracy: 0.7500\n",
            "Epoch 437/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0202 - accuracy: 0.9889 - val_loss: 2.1679 - val_accuracy: 0.7500\n",
            "Epoch 438/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0206 - accuracy: 0.9944 - val_loss: 1.2067 - val_accuracy: 0.7500\n",
            "Epoch 439/500\n",
            "3/3 [==============================] - 0s 47ms/step - loss: 0.0179 - accuracy: 1.0000 - val_loss: 1.4219 - val_accuracy: 0.7500\n",
            "Epoch 440/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0318 - accuracy: 0.9833 - val_loss: 1.5855 - val_accuracy: 0.7000\n",
            "Epoch 441/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0158 - accuracy: 0.9944 - val_loss: 1.5574 - val_accuracy: 0.7000\n",
            "Epoch 442/500\n",
            "3/3 [==============================] - 0s 48ms/step - loss: 0.0201 - accuracy: 0.9944 - val_loss: 1.8105 - val_accuracy: 0.7500\n",
            "Epoch 443/500\n",
            "3/3 [==============================] - 0s 47ms/step - loss: 0.0304 - accuracy: 0.9889 - val_loss: 1.4760 - val_accuracy: 0.7000\n",
            "Epoch 444/500\n",
            "3/3 [==============================] - 0s 47ms/step - loss: 0.0283 - accuracy: 0.9944 - val_loss: 1.2006 - val_accuracy: 0.7000\n",
            "Epoch 445/500\n",
            "3/3 [==============================] - 0s 46ms/step - loss: 0.0047 - accuracy: 1.0000 - val_loss: 1.8879 - val_accuracy: 0.7500\n",
            "Epoch 446/500\n",
            "3/3 [==============================] - 0s 41ms/step - loss: 0.0058 - accuracy: 1.0000 - val_loss: 2.6786 - val_accuracy: 0.7000\n",
            "Epoch 447/500\n",
            "3/3 [==============================] - 0s 46ms/step - loss: 0.0264 - accuracy: 0.9889 - val_loss: 0.7579 - val_accuracy: 0.7500\n",
            "Epoch 448/500\n",
            "3/3 [==============================] - 0s 41ms/step - loss: 0.0951 - accuracy: 0.9500 - val_loss: 4.8023 - val_accuracy: 0.7500\n",
            "Epoch 449/500\n",
            "3/3 [==============================] - 0s 45ms/step - loss: 0.5065 - accuracy: 0.9111 - val_loss: 1.2479 - val_accuracy: 0.8000\n",
            "Epoch 450/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.3261 - accuracy: 0.8944 - val_loss: 2.2099 - val_accuracy: 0.7500\n",
            "Epoch 451/500\n",
            "3/3 [==============================] - 0s 52ms/step - loss: 0.2601 - accuracy: 0.8944 - val_loss: 0.9233 - val_accuracy: 0.7000\n",
            "Epoch 452/500\n",
            "3/3 [==============================] - 0s 54ms/step - loss: 0.1544 - accuracy: 0.9556 - val_loss: 0.5717 - val_accuracy: 0.8000\n",
            "Epoch 453/500\n",
            "3/3 [==============================] - 0s 43ms/step - loss: 0.1185 - accuracy: 0.9667 - val_loss: 0.9479 - val_accuracy: 0.7500\n",
            "Epoch 454/500\n",
            "3/3 [==============================] - 0s 45ms/step - loss: 0.0899 - accuracy: 0.9611 - val_loss: 0.6907 - val_accuracy: 0.8500\n",
            "Epoch 455/500\n",
            "3/3 [==============================] - 0s 47ms/step - loss: 0.0702 - accuracy: 0.9833 - val_loss: 1.1282 - val_accuracy: 0.7000\n",
            "Epoch 456/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0567 - accuracy: 0.9944 - val_loss: 1.2947 - val_accuracy: 0.7000\n",
            "Epoch 457/500\n",
            "3/3 [==============================] - 0s 41ms/step - loss: 0.0483 - accuracy: 0.9889 - val_loss: 1.0699 - val_accuracy: 0.7000\n",
            "Epoch 458/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0573 - accuracy: 0.9778 - val_loss: 1.2248 - val_accuracy: 0.7500\n",
            "Epoch 459/500\n",
            "3/3 [==============================] - 0s 50ms/step - loss: 0.0502 - accuracy: 0.9778 - val_loss: 1.5271 - val_accuracy: 0.7500\n",
            "Epoch 460/500\n",
            "3/3 [==============================] - 0s 46ms/step - loss: 0.0192 - accuracy: 0.9944 - val_loss: 1.2048 - val_accuracy: 0.7000\n",
            "Epoch 461/500\n",
            "3/3 [==============================] - 0s 48ms/step - loss: 0.0274 - accuracy: 1.0000 - val_loss: 1.7611 - val_accuracy: 0.7000\n",
            "Epoch 462/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0577 - accuracy: 0.9778 - val_loss: 1.8976 - val_accuracy: 0.7500\n",
            "Epoch 463/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0258 - accuracy: 0.9944 - val_loss: 1.3840 - val_accuracy: 0.7000\n",
            "Epoch 464/500\n",
            "3/3 [==============================] - 0s 47ms/step - loss: 0.0426 - accuracy: 0.9778 - val_loss: 2.0518 - val_accuracy: 0.7000\n",
            "Epoch 465/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0624 - accuracy: 0.9778 - val_loss: 1.5984 - val_accuracy: 0.7000\n",
            "Epoch 466/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0669 - accuracy: 0.9833 - val_loss: 1.5856 - val_accuracy: 0.7500\n",
            "Epoch 467/500\n",
            "3/3 [==============================] - 0s 52ms/step - loss: 0.0387 - accuracy: 0.9833 - val_loss: 1.9909 - val_accuracy: 0.7000\n",
            "Epoch 468/500\n",
            "3/3 [==============================] - 0s 48ms/step - loss: 0.0230 - accuracy: 1.0000 - val_loss: 1.5817 - val_accuracy: 0.7500\n",
            "Epoch 469/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0097 - accuracy: 1.0000 - val_loss: 1.1799 - val_accuracy: 0.7000\n",
            "Epoch 470/500\n",
            "3/3 [==============================] - 0s 45ms/step - loss: 0.0255 - accuracy: 0.9944 - val_loss: 1.3923 - val_accuracy: 0.7000\n",
            "Epoch 471/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0083 - accuracy: 1.0000 - val_loss: 1.8887 - val_accuracy: 0.7000\n",
            "Epoch 472/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0138 - accuracy: 1.0000 - val_loss: 1.9392 - val_accuracy: 0.7500\n",
            "Epoch 473/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0276 - accuracy: 0.9889 - val_loss: 1.7386 - val_accuracy: 0.7000\n",
            "Epoch 474/500\n",
            "3/3 [==============================] - 0s 46ms/step - loss: 0.0072 - accuracy: 1.0000 - val_loss: 1.7647 - val_accuracy: 0.7000\n",
            "Epoch 475/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0105 - accuracy: 1.0000 - val_loss: 1.7043 - val_accuracy: 0.6500\n",
            "Epoch 476/500\n",
            "3/3 [==============================] - 0s 46ms/step - loss: 0.0048 - accuracy: 1.0000 - val_loss: 1.6798 - val_accuracy: 0.7000\n",
            "Epoch 477/500\n",
            "3/3 [==============================] - 0s 41ms/step - loss: 0.0092 - accuracy: 1.0000 - val_loss: 1.8479 - val_accuracy: 0.7500\n",
            "Epoch 478/500\n",
            "3/3 [==============================] - 0s 47ms/step - loss: 0.0119 - accuracy: 1.0000 - val_loss: 1.7892 - val_accuracy: 0.7500\n",
            "Epoch 479/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0070 - accuracy: 1.0000 - val_loss: 1.6963 - val_accuracy: 0.7000\n",
            "Epoch 480/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0160 - accuracy: 0.9889 - val_loss: 1.5882 - val_accuracy: 0.7000\n",
            "Epoch 481/500\n",
            "3/3 [==============================] - 0s 41ms/step - loss: 0.0152 - accuracy: 1.0000 - val_loss: 1.6556 - val_accuracy: 0.7000\n",
            "Epoch 482/500\n",
            "3/3 [==============================] - 0s 46ms/step - loss: 0.0118 - accuracy: 0.9944 - val_loss: 1.9257 - val_accuracy: 0.7000\n",
            "Epoch 483/500\n",
            "3/3 [==============================] - 0s 46ms/step - loss: 0.0051 - accuracy: 1.0000 - val_loss: 2.0757 - val_accuracy: 0.7000\n",
            "Epoch 484/500\n",
            "3/3 [==============================] - 0s 54ms/step - loss: 0.0131 - accuracy: 1.0000 - val_loss: 2.0663 - val_accuracy: 0.7000\n",
            "Epoch 485/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0048 - accuracy: 1.0000 - val_loss: 2.1584 - val_accuracy: 0.7000\n",
            "Epoch 486/500\n",
            "3/3 [==============================] - 0s 44ms/step - loss: 0.0163 - accuracy: 0.9944 - val_loss: 1.8602 - val_accuracy: 0.7500\n",
            "Epoch 487/500\n",
            "3/3 [==============================] - 0s 46ms/step - loss: 0.0140 - accuracy: 0.9944 - val_loss: 1.8865 - val_accuracy: 0.7500\n",
            "Epoch 488/500\n",
            "3/3 [==============================] - 0s 52ms/step - loss: 0.0056 - accuracy: 1.0000 - val_loss: 2.0286 - val_accuracy: 0.7500\n",
            "Epoch 489/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0086 - accuracy: 1.0000 - val_loss: 1.9729 - val_accuracy: 0.7000\n",
            "Epoch 490/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0122 - accuracy: 0.9944 - val_loss: 1.8761 - val_accuracy: 0.7500\n",
            "Epoch 491/500\n",
            "3/3 [==============================] - 0s 41ms/step - loss: 0.0034 - accuracy: 1.0000 - val_loss: 1.8912 - val_accuracy: 0.7500\n",
            "Epoch 492/500\n",
            "3/3 [==============================] - 0s 48ms/step - loss: 0.0039 - accuracy: 1.0000 - val_loss: 1.9360 - val_accuracy: 0.7000\n",
            "Epoch 493/500\n",
            "3/3 [==============================] - 0s 57ms/step - loss: 0.0052 - accuracy: 1.0000 - val_loss: 1.7140 - val_accuracy: 0.7000\n",
            "Epoch 494/500\n",
            "3/3 [==============================] - 0s 48ms/step - loss: 0.0074 - accuracy: 1.0000 - val_loss: 1.7568 - val_accuracy: 0.7000\n",
            "Epoch 495/500\n",
            "3/3 [==============================] - 0s 45ms/step - loss: 0.0050 - accuracy: 1.0000 - val_loss: 1.9882 - val_accuracy: 0.7000\n",
            "Epoch 496/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0070 - accuracy: 1.0000 - val_loss: 2.0697 - val_accuracy: 0.7000\n",
            "Epoch 497/500\n",
            "3/3 [==============================] - 0s 39ms/step - loss: 0.0079 - accuracy: 1.0000 - val_loss: 1.7286 - val_accuracy: 0.7000\n",
            "Epoch 498/500\n",
            "3/3 [==============================] - 0s 45ms/step - loss: 0.0087 - accuracy: 0.9944 - val_loss: 1.5220 - val_accuracy: 0.7000\n",
            "Epoch 499/500\n",
            "3/3 [==============================] - 0s 40ms/step - loss: 0.0033 - accuracy: 1.0000 - val_loss: 1.5339 - val_accuracy: 0.7000\n",
            "Epoch 500/500\n",
            "3/3 [==============================] - 0s 53ms/step - loss: 0.0049 - accuracy: 1.0000 - val_loss: 1.6185 - val_accuracy: 0.7500\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])\n",
        "plt.title('model loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'val'], loc='upper left')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "5cdPakuqbLkL",
        "outputId": "c6985794-22b2-42e3-a647-2a9e85469197"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **6. Model Evaluation**"
      ],
      "metadata": {
        "id": "lBRyX76UbP8T"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "y_predict=model.predict(X_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "tTljSwPzyJaM",
        "outputId": "1e6e3bad-2934-41a8-d22e-9e3350afbd54"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2/2 [==============================] - 0s 9ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = y_predict.argmax(axis=-1)"
      ],
      "metadata": {
        "id": "fgj36WdW7uTQ"
      },
      "execution_count": 58,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "l0qogdk12aPe",
        "outputId": "9deec900-1c8c-4ae6-e64b-2908252d0ade"
      },
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([2, 4, 2, 0, 4, 1, 4, 4, 0, 4, 4, 0, 3, 0, 4, 4, 4, 2, 2, 4, 4, 4,\n",
              "       1, 2, 4, 4, 3, 4, 4, 4, 2, 4, 2, 4, 3, 0, 4, 4, 2, 0, 0, 0, 0, 4,\n",
              "       2, 2, 4, 4, 3, 3])"
            ]
          },
          "metadata": {},
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "PdtOWUE45trU",
        "outputId": "d61bf313-685d-4be5-9df5-9ef347317d8e"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 4, 2, 0, 4, 0, 4, 4, 0, 4, 4, 1, 3, 0, 4, 4, 3, 2, 2, 4, 4, 4,\n",
              "       0, 2, 4, 4, 1, 4, 4, 4, 2, 4, 2, 4, 0, 0, 4, 4, 2, 0, 1, 0, 0, 1,\n",
              "       2, 2, 4, 3, 1, 3])"
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### **Accuracy of the model on the test data**"
      ],
      "metadata": {
        "id": "G3utY39Nbfmw"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Accuracy**\n",
        "\n"
      ],
      "metadata": {
        "id": "fjZoQnpW3ZHE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score\n",
        "accuracy_score(y_test, y_pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "DsqTVSfr8Lwq",
        "outputId": "f5a8a40b-31af-4e88-884f-930f6f31a72f"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.78"
            ]
          },
          "metadata": {},
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Confusion Matrix**\n"
      ],
      "metadata": {
        "id": "ykopk4p73ToG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "cm = confusion_matrix(y_test, y_pred)"
      ],
      "metadata": {
        "id": "Ni-5QnKa8jxk"
      },
      "execution_count": 62,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cm_df = pd.DataFrame(cm,\n",
        "                     index = ['anger','fear','happy','sadness','surprise'], \n",
        "                     columns = ['anger','fear','happy','sadness','surprise'])"
      ],
      "metadata": {
        "id": "7nc7JFfg920n"
      },
      "execution_count": 63,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Plotting the confusion matrix\n",
        "plt.figure(figsize=(5,4))\n",
        "sns.heatmap(cm_df, annot=True)\n",
        "plt.title('Confusion Matrix')\n",
        "plt.ylabel('Actual Values')\n",
        "plt.xlabel('Predicted Values')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "d6Gkh9aB-qtS",
        "outputId": "f9c29c45-4838-4aba-f8cc-eaca73a4b0d8"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Classification Report**\n"
      ],
      "metadata": {
        "id": "ING51Um53OTa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report\n",
        "target_names = ['anger','fear','happy','sadness','surprise']\n",
        "print(classification_report(y_test, y_pred, target_names=target_names))"
      ],
      "metadata": {
        "id": "6XOpvmCL-9f8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "d46642c7-ed24-4ebc-dde8-80eb0746d0aa"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "       anger       0.78      0.70      0.74        10\n",
            "        fear       0.00      0.00      0.00         6\n",
            "       happy       0.90      1.00      0.95         9\n",
            "     sadness       0.40      0.50      0.44         4\n",
            "    surprise       0.88      1.00      0.93        21\n",
            "\n",
            "    accuracy                           0.78        50\n",
            "   macro avg       0.59      0.64      0.61        50\n",
            "weighted avg       0.72      0.78      0.75        50\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The model has shown accuracy of 78% on the test data.\n",
        "From the confusion matrix and classification report, it shows that model has identified the expressions **happy** and **surprise** with 100% accuracy  but were not able to pick the images with expression as **fear**. \n",
        "\n",
        "The model accuracy can be improved by image augmentation and more image samples for the training of the model."
      ],
      "metadata": {
        "id": "0YOxEB2-3gsW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "--------------------------------------------------------------------------------------------------------------END--------------------------------------------------------------------------------------------------------------"
      ],
      "metadata": {
        "id": "fhr_reaqd5RO"
      }
    }
  ]
}